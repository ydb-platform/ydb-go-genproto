// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: draft/ydb_keyvalue_v1.proto

package Ydb_KeyValue_V1

import (
	context "context"
	Ydb_KeyValue "github.com/ydb-platform/ydb-go-genproto/draft/protos/Ydb_KeyValue"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyValueService_CreateVolume_FullMethodName            = "/Ydb.KeyValue.V1.KeyValueService/CreateVolume"
	KeyValueService_DropVolume_FullMethodName              = "/Ydb.KeyValue.V1.KeyValueService/DropVolume"
	KeyValueService_AlterVolume_FullMethodName             = "/Ydb.KeyValue.V1.KeyValueService/AlterVolume"
	KeyValueService_DescribeVolume_FullMethodName          = "/Ydb.KeyValue.V1.KeyValueService/DescribeVolume"
	KeyValueService_ListLocalPartitions_FullMethodName     = "/Ydb.KeyValue.V1.KeyValueService/ListLocalPartitions"
	KeyValueService_AcquireLock_FullMethodName             = "/Ydb.KeyValue.V1.KeyValueService/AcquireLock"
	KeyValueService_ExecuteTransaction_FullMethodName      = "/Ydb.KeyValue.V1.KeyValueService/ExecuteTransaction"
	KeyValueService_Read_FullMethodName                    = "/Ydb.KeyValue.V1.KeyValueService/Read"
	KeyValueService_ReadRange_FullMethodName               = "/Ydb.KeyValue.V1.KeyValueService/ReadRange"
	KeyValueService_ListRange_FullMethodName               = "/Ydb.KeyValue.V1.KeyValueService/ListRange"
	KeyValueService_GetStorageChannelStatus_FullMethodName = "/Ydb.KeyValue.V1.KeyValueService/GetStorageChannelStatus"
)

// KeyValueServiceClient is the client API for KeyValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueServiceClient interface {
	// Create a volume by path and partition count
	CreateVolume(ctx context.Context, in *Ydb_KeyValue.CreateVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.CreateVolumeResponse, error)
	// Drop the volume by path
	DropVolume(ctx context.Context, in *Ydb_KeyValue.DropVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.DropVolumeResponse, error)
	// Alter the volume by path
	AlterVolume(ctx context.Context, in *Ydb_KeyValue.AlterVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.AlterVolumeResponse, error)
	// Describe the volume by path
	DescribeVolume(ctx context.Context, in *Ydb_KeyValue.DescribeVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.DescribeVolumeResponse, error)
	// List partitions of a volume at the local node.
	ListLocalPartitions(ctx context.Context, in *Ydb_KeyValue.ListLocalPartitionsRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ListLocalPartitionsResponse, error)
	// Acquire an exclusive lock for the partition.
	AcquireLock(ctx context.Context, in *Ydb_KeyValue.AcquireLockRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.AcquireLockResponse, error)
	// Perform list of commands to modify the state of the partition as an atomic transaction.
	ExecuteTransaction(ctx context.Context, in *Ydb_KeyValue.ExecuteTransactionRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ExecuteTransactionResponse, error)
	// Read the value stored in the item with the key specified.
	Read(ctx context.Context, in *Ydb_KeyValue.ReadRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ReadResponse, error)
	// Read items with keys in the specified range.
	ReadRange(ctx context.Context, in *Ydb_KeyValue.ReadRangeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ReadRangeResponse, error)
	// List keys and metadata of items with keys in the specified range.
	ListRange(ctx context.Context, in *Ydb_KeyValue.ListRangeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ListRangeResponse, error)
	// Get storage channel status of the partition.
	GetStorageChannelStatus(ctx context.Context, in *Ydb_KeyValue.GetStorageChannelStatusRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.GetStorageChannelStatusResponse, error)
}

type keyValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueServiceClient(cc grpc.ClientConnInterface) KeyValueServiceClient {
	return &keyValueServiceClient{cc}
}

func (c *keyValueServiceClient) CreateVolume(ctx context.Context, in *Ydb_KeyValue.CreateVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.CreateVolumeResponse, error) {
	out := new(Ydb_KeyValue.CreateVolumeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_CreateVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) DropVolume(ctx context.Context, in *Ydb_KeyValue.DropVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.DropVolumeResponse, error) {
	out := new(Ydb_KeyValue.DropVolumeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_DropVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) AlterVolume(ctx context.Context, in *Ydb_KeyValue.AlterVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.AlterVolumeResponse, error) {
	out := new(Ydb_KeyValue.AlterVolumeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_AlterVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) DescribeVolume(ctx context.Context, in *Ydb_KeyValue.DescribeVolumeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.DescribeVolumeResponse, error) {
	out := new(Ydb_KeyValue.DescribeVolumeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_DescribeVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) ListLocalPartitions(ctx context.Context, in *Ydb_KeyValue.ListLocalPartitionsRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ListLocalPartitionsResponse, error) {
	out := new(Ydb_KeyValue.ListLocalPartitionsResponse)
	err := c.cc.Invoke(ctx, KeyValueService_ListLocalPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) AcquireLock(ctx context.Context, in *Ydb_KeyValue.AcquireLockRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.AcquireLockResponse, error) {
	out := new(Ydb_KeyValue.AcquireLockResponse)
	err := c.cc.Invoke(ctx, KeyValueService_AcquireLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) ExecuteTransaction(ctx context.Context, in *Ydb_KeyValue.ExecuteTransactionRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ExecuteTransactionResponse, error) {
	out := new(Ydb_KeyValue.ExecuteTransactionResponse)
	err := c.cc.Invoke(ctx, KeyValueService_ExecuteTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) Read(ctx context.Context, in *Ydb_KeyValue.ReadRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ReadResponse, error) {
	out := new(Ydb_KeyValue.ReadResponse)
	err := c.cc.Invoke(ctx, KeyValueService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) ReadRange(ctx context.Context, in *Ydb_KeyValue.ReadRangeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ReadRangeResponse, error) {
	out := new(Ydb_KeyValue.ReadRangeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_ReadRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) ListRange(ctx context.Context, in *Ydb_KeyValue.ListRangeRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.ListRangeResponse, error) {
	out := new(Ydb_KeyValue.ListRangeResponse)
	err := c.cc.Invoke(ctx, KeyValueService_ListRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) GetStorageChannelStatus(ctx context.Context, in *Ydb_KeyValue.GetStorageChannelStatusRequest, opts ...grpc.CallOption) (*Ydb_KeyValue.GetStorageChannelStatusResponse, error) {
	out := new(Ydb_KeyValue.GetStorageChannelStatusResponse)
	err := c.cc.Invoke(ctx, KeyValueService_GetStorageChannelStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueServiceServer is the server API for KeyValueService service.
// All implementations must embed UnimplementedKeyValueServiceServer
// for forward compatibility
type KeyValueServiceServer interface {
	// Create a volume by path and partition count
	CreateVolume(context.Context, *Ydb_KeyValue.CreateVolumeRequest) (*Ydb_KeyValue.CreateVolumeResponse, error)
	// Drop the volume by path
	DropVolume(context.Context, *Ydb_KeyValue.DropVolumeRequest) (*Ydb_KeyValue.DropVolumeResponse, error)
	// Alter the volume by path
	AlterVolume(context.Context, *Ydb_KeyValue.AlterVolumeRequest) (*Ydb_KeyValue.AlterVolumeResponse, error)
	// Describe the volume by path
	DescribeVolume(context.Context, *Ydb_KeyValue.DescribeVolumeRequest) (*Ydb_KeyValue.DescribeVolumeResponse, error)
	// List partitions of a volume at the local node.
	ListLocalPartitions(context.Context, *Ydb_KeyValue.ListLocalPartitionsRequest) (*Ydb_KeyValue.ListLocalPartitionsResponse, error)
	// Acquire an exclusive lock for the partition.
	AcquireLock(context.Context, *Ydb_KeyValue.AcquireLockRequest) (*Ydb_KeyValue.AcquireLockResponse, error)
	// Perform list of commands to modify the state of the partition as an atomic transaction.
	ExecuteTransaction(context.Context, *Ydb_KeyValue.ExecuteTransactionRequest) (*Ydb_KeyValue.ExecuteTransactionResponse, error)
	// Read the value stored in the item with the key specified.
	Read(context.Context, *Ydb_KeyValue.ReadRequest) (*Ydb_KeyValue.ReadResponse, error)
	// Read items with keys in the specified range.
	ReadRange(context.Context, *Ydb_KeyValue.ReadRangeRequest) (*Ydb_KeyValue.ReadRangeResponse, error)
	// List keys and metadata of items with keys in the specified range.
	ListRange(context.Context, *Ydb_KeyValue.ListRangeRequest) (*Ydb_KeyValue.ListRangeResponse, error)
	// Get storage channel status of the partition.
	GetStorageChannelStatus(context.Context, *Ydb_KeyValue.GetStorageChannelStatusRequest) (*Ydb_KeyValue.GetStorageChannelStatusResponse, error)
	mustEmbedUnimplementedKeyValueServiceServer()
}

// UnimplementedKeyValueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyValueServiceServer struct {
}

func (UnimplementedKeyValueServiceServer) CreateVolume(context.Context, *Ydb_KeyValue.CreateVolumeRequest) (*Ydb_KeyValue.CreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedKeyValueServiceServer) DropVolume(context.Context, *Ydb_KeyValue.DropVolumeRequest) (*Ydb_KeyValue.DropVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropVolume not implemented")
}
func (UnimplementedKeyValueServiceServer) AlterVolume(context.Context, *Ydb_KeyValue.AlterVolumeRequest) (*Ydb_KeyValue.AlterVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterVolume not implemented")
}
func (UnimplementedKeyValueServiceServer) DescribeVolume(context.Context, *Ydb_KeyValue.DescribeVolumeRequest) (*Ydb_KeyValue.DescribeVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVolume not implemented")
}
func (UnimplementedKeyValueServiceServer) ListLocalPartitions(context.Context, *Ydb_KeyValue.ListLocalPartitionsRequest) (*Ydb_KeyValue.ListLocalPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalPartitions not implemented")
}
func (UnimplementedKeyValueServiceServer) AcquireLock(context.Context, *Ydb_KeyValue.AcquireLockRequest) (*Ydb_KeyValue.AcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedKeyValueServiceServer) ExecuteTransaction(context.Context, *Ydb_KeyValue.ExecuteTransactionRequest) (*Ydb_KeyValue.ExecuteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}
func (UnimplementedKeyValueServiceServer) Read(context.Context, *Ydb_KeyValue.ReadRequest) (*Ydb_KeyValue.ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedKeyValueServiceServer) ReadRange(context.Context, *Ydb_KeyValue.ReadRangeRequest) (*Ydb_KeyValue.ReadRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRange not implemented")
}
func (UnimplementedKeyValueServiceServer) ListRange(context.Context, *Ydb_KeyValue.ListRangeRequest) (*Ydb_KeyValue.ListRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRange not implemented")
}
func (UnimplementedKeyValueServiceServer) GetStorageChannelStatus(context.Context, *Ydb_KeyValue.GetStorageChannelStatusRequest) (*Ydb_KeyValue.GetStorageChannelStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageChannelStatus not implemented")
}
func (UnimplementedKeyValueServiceServer) mustEmbedUnimplementedKeyValueServiceServer() {}

// UnsafeKeyValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueServiceServer will
// result in compilation errors.
type UnsafeKeyValueServiceServer interface {
	mustEmbedUnimplementedKeyValueServiceServer()
}

func RegisterKeyValueServiceServer(s grpc.ServiceRegistrar, srv KeyValueServiceServer) {
	s.RegisterService(&KeyValueService_ServiceDesc, srv)
}

func _KeyValueService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).CreateVolume(ctx, req.(*Ydb_KeyValue.CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_DropVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.DropVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).DropVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_DropVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).DropVolume(ctx, req.(*Ydb_KeyValue.DropVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_AlterVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.AlterVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).AlterVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_AlterVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).AlterVolume(ctx, req.(*Ydb_KeyValue.AlterVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_DescribeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.DescribeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).DescribeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_DescribeVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).DescribeVolume(ctx, req.(*Ydb_KeyValue.DescribeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_ListLocalPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.ListLocalPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).ListLocalPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_ListLocalPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).ListLocalPartitions(ctx, req.(*Ydb_KeyValue.ListLocalPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_AcquireLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).AcquireLock(ctx, req.(*Ydb_KeyValue.AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.ExecuteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_ExecuteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).ExecuteTransaction(ctx, req.(*Ydb_KeyValue.ExecuteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Read(ctx, req.(*Ydb_KeyValue.ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_ReadRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.ReadRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).ReadRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_ReadRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).ReadRange(ctx, req.(*Ydb_KeyValue.ReadRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_ListRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.ListRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).ListRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_ListRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).ListRange(ctx, req.(*Ydb_KeyValue.ListRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_GetStorageChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_KeyValue.GetStorageChannelStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).GetStorageChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_GetStorageChannelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).GetStorageChannelStatus(ctx, req.(*Ydb_KeyValue.GetStorageChannelStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueService_ServiceDesc is the grpc.ServiceDesc for KeyValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.KeyValue.V1.KeyValueService",
	HandlerType: (*KeyValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _KeyValueService_CreateVolume_Handler,
		},
		{
			MethodName: "DropVolume",
			Handler:    _KeyValueService_DropVolume_Handler,
		},
		{
			MethodName: "AlterVolume",
			Handler:    _KeyValueService_AlterVolume_Handler,
		},
		{
			MethodName: "DescribeVolume",
			Handler:    _KeyValueService_DescribeVolume_Handler,
		},
		{
			MethodName: "ListLocalPartitions",
			Handler:    _KeyValueService_ListLocalPartitions_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _KeyValueService_AcquireLock_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _KeyValueService_ExecuteTransaction_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _KeyValueService_Read_Handler,
		},
		{
			MethodName: "ReadRange",
			Handler:    _KeyValueService_ReadRange_Handler,
		},
		{
			MethodName: "ListRange",
			Handler:    _KeyValueService_ListRange_Handler,
		},
		{
			MethodName: "GetStorageChannelStatus",
			Handler:    _KeyValueService_GetStorageChannelStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/ydb_keyvalue_v1.proto",
}
