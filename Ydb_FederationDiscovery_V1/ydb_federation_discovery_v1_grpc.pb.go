// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ydb_federation_discovery_v1.proto

package Ydb_FederationDiscovery_V1

import (
	context "context"
	Ydb_FederationDiscovery "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_FederationDiscovery"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FederationDiscoveryService_ListFederationDatabases_FullMethodName = "/Ydb.FederationDiscovery.V1.FederationDiscoveryService/ListFederationDatabases"
)

// FederationDiscoveryServiceClient is the client API for FederationDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederationDiscoveryServiceClient interface {
	// Get list of databases.
	ListFederationDatabases(ctx context.Context, in *Ydb_FederationDiscovery.ListFederationDatabasesRequest, opts ...grpc.CallOption) (*Ydb_FederationDiscovery.ListFederationDatabasesResponse, error)
}

type federationDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFederationDiscoveryServiceClient(cc grpc.ClientConnInterface) FederationDiscoveryServiceClient {
	return &federationDiscoveryServiceClient{cc}
}

func (c *federationDiscoveryServiceClient) ListFederationDatabases(ctx context.Context, in *Ydb_FederationDiscovery.ListFederationDatabasesRequest, opts ...grpc.CallOption) (*Ydb_FederationDiscovery.ListFederationDatabasesResponse, error) {
	out := new(Ydb_FederationDiscovery.ListFederationDatabasesResponse)
	err := c.cc.Invoke(ctx, FederationDiscoveryService_ListFederationDatabases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederationDiscoveryServiceServer is the server API for FederationDiscoveryService service.
// All implementations must embed UnimplementedFederationDiscoveryServiceServer
// for forward compatibility
type FederationDiscoveryServiceServer interface {
	// Get list of databases.
	ListFederationDatabases(context.Context, *Ydb_FederationDiscovery.ListFederationDatabasesRequest) (*Ydb_FederationDiscovery.ListFederationDatabasesResponse, error)
	mustEmbedUnimplementedFederationDiscoveryServiceServer()
}

// UnimplementedFederationDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFederationDiscoveryServiceServer struct {
}

func (UnimplementedFederationDiscoveryServiceServer) ListFederationDatabases(context.Context, *Ydb_FederationDiscovery.ListFederationDatabasesRequest) (*Ydb_FederationDiscovery.ListFederationDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederationDatabases not implemented")
}
func (UnimplementedFederationDiscoveryServiceServer) mustEmbedUnimplementedFederationDiscoveryServiceServer() {
}

// UnsafeFederationDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederationDiscoveryServiceServer will
// result in compilation errors.
type UnsafeFederationDiscoveryServiceServer interface {
	mustEmbedUnimplementedFederationDiscoveryServiceServer()
}

func RegisterFederationDiscoveryServiceServer(s grpc.ServiceRegistrar, srv FederationDiscoveryServiceServer) {
	s.RegisterService(&FederationDiscoveryService_ServiceDesc, srv)
}

func _FederationDiscoveryService_ListFederationDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_FederationDiscovery.ListFederationDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationDiscoveryServiceServer).ListFederationDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationDiscoveryService_ListFederationDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationDiscoveryServiceServer).ListFederationDatabases(ctx, req.(*Ydb_FederationDiscovery.ListFederationDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FederationDiscoveryService_ServiceDesc is the grpc.ServiceDesc for FederationDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederationDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.FederationDiscovery.V1.FederationDiscoveryService",
	HandlerType: (*FederationDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFederationDatabases",
			Handler:    _FederationDiscoveryService_ListFederationDatabases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ydb_federation_discovery_v1.proto",
}
