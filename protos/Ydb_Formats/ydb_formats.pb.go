// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: protos/ydb_formats.proto

//go:build !protoopaque

package Ydb_Formats

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArrowBatchSettings struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Schema        []byte                 `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrowBatchSettings) Reset() {
	*x = ArrowBatchSettings{}
	mi := &file_protos_ydb_formats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrowBatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowBatchSettings) ProtoMessage() {}

func (x *ArrowBatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_formats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArrowBatchSettings) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ArrowBatchSettings) SetSchema(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Schema = v
}

func (x *ArrowBatchSettings) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.Schema != nil
}

func (x *ArrowBatchSettings) ClearSchema() {
	x.Schema = nil
}

type ArrowBatchSettings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Schema []byte
}

func (b0 ArrowBatchSettings_builder) Build() *ArrowBatchSettings {
	m0 := &ArrowBatchSettings{}
	b, x := &b0, m0
	_, _ = b, x
	x.Schema = b.Schema
	return m0
}

type CsvSettings struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Number of rows to skip before CSV data. It should be present only in the first upsert of CSV file.
	SkipRows *uint32 `protobuf:"varint,1,opt,name=skip_rows,json=skipRows" json:"skip_rows,omitempty"`
	// Fields delimiter in CSV file. It's "," if not set.
	Delimiter []byte `protobuf:"bytes,2,opt,name=delimiter" json:"delimiter,omitempty"`
	// String value that would be interpreted as NULL.
	NullValue []byte `protobuf:"bytes,3,opt,name=null_value,json=nullValue" json:"null_value,omitempty"`
	// First not skipped line is a CSV header (list of column names).
	Header        *bool                `protobuf:"varint,4,opt,name=header" json:"header,omitempty"`
	Quoting       *CsvSettings_Quoting `protobuf:"bytes,5,opt,name=quoting" json:"quoting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CsvSettings) Reset() {
	*x = CsvSettings{}
	mi := &file_protos_ydb_formats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvSettings) ProtoMessage() {}

func (x *CsvSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_formats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CsvSettings) GetSkipRows() uint32 {
	if x != nil && x.SkipRows != nil {
		return *x.SkipRows
	}
	return 0
}

func (x *CsvSettings) GetDelimiter() []byte {
	if x != nil {
		return x.Delimiter
	}
	return nil
}

func (x *CsvSettings) GetNullValue() []byte {
	if x != nil {
		return x.NullValue
	}
	return nil
}

func (x *CsvSettings) GetHeader() bool {
	if x != nil && x.Header != nil {
		return *x.Header
	}
	return false
}

func (x *CsvSettings) GetQuoting() *CsvSettings_Quoting {
	if x != nil {
		return x.Quoting
	}
	return nil
}

func (x *CsvSettings) SetSkipRows(v uint32) {
	x.SkipRows = &v
}

func (x *CsvSettings) SetDelimiter(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Delimiter = v
}

func (x *CsvSettings) SetNullValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.NullValue = v
}

func (x *CsvSettings) SetHeader(v bool) {
	x.Header = &v
}

func (x *CsvSettings) SetQuoting(v *CsvSettings_Quoting) {
	x.Quoting = v
}

func (x *CsvSettings) HasSkipRows() bool {
	if x == nil {
		return false
	}
	return x.SkipRows != nil
}

func (x *CsvSettings) HasDelimiter() bool {
	if x == nil {
		return false
	}
	return x.Delimiter != nil
}

func (x *CsvSettings) HasNullValue() bool {
	if x == nil {
		return false
	}
	return x.NullValue != nil
}

func (x *CsvSettings) HasHeader() bool {
	if x == nil {
		return false
	}
	return x.Header != nil
}

func (x *CsvSettings) HasQuoting() bool {
	if x == nil {
		return false
	}
	return x.Quoting != nil
}

func (x *CsvSettings) ClearSkipRows() {
	x.SkipRows = nil
}

func (x *CsvSettings) ClearDelimiter() {
	x.Delimiter = nil
}

func (x *CsvSettings) ClearNullValue() {
	x.NullValue = nil
}

func (x *CsvSettings) ClearHeader() {
	x.Header = nil
}

func (x *CsvSettings) ClearQuoting() {
	x.Quoting = nil
}

type CsvSettings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Number of rows to skip before CSV data. It should be present only in the first upsert of CSV file.
	SkipRows *uint32
	// Fields delimiter in CSV file. It's "," if not set.
	Delimiter []byte
	// String value that would be interpreted as NULL.
	NullValue []byte
	// First not skipped line is a CSV header (list of column names).
	Header  *bool
	Quoting *CsvSettings_Quoting
}

func (b0 CsvSettings_builder) Build() *CsvSettings {
	m0 := &CsvSettings{}
	b, x := &b0, m0
	_, _ = b, x
	x.SkipRows = b.SkipRows
	x.Delimiter = b.Delimiter
	x.NullValue = b.NullValue
	x.Header = b.Header
	x.Quoting = b.Quoting
	return m0
}

type CsvSettings_Quoting struct {
	state               protoimpl.MessageState `protogen:"hybrid.v1"`
	Disabled            *bool                  `protobuf:"varint,1,opt,name=disabled" json:"disabled,omitempty"`
	QuoteChar           []byte                 `protobuf:"bytes,2,opt,name=quote_char,json=quoteChar" json:"quote_char,omitempty"`
	DoubleQuoteDisabled *bool                  `protobuf:"varint,3,opt,name=double_quote_disabled,json=doubleQuoteDisabled" json:"double_quote_disabled,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CsvSettings_Quoting) Reset() {
	*x = CsvSettings_Quoting{}
	mi := &file_protos_ydb_formats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvSettings_Quoting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvSettings_Quoting) ProtoMessage() {}

func (x *CsvSettings_Quoting) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_formats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CsvSettings_Quoting) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *CsvSettings_Quoting) GetQuoteChar() []byte {
	if x != nil {
		return x.QuoteChar
	}
	return nil
}

func (x *CsvSettings_Quoting) GetDoubleQuoteDisabled() bool {
	if x != nil && x.DoubleQuoteDisabled != nil {
		return *x.DoubleQuoteDisabled
	}
	return false
}

func (x *CsvSettings_Quoting) SetDisabled(v bool) {
	x.Disabled = &v
}

func (x *CsvSettings_Quoting) SetQuoteChar(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.QuoteChar = v
}

func (x *CsvSettings_Quoting) SetDoubleQuoteDisabled(v bool) {
	x.DoubleQuoteDisabled = &v
}

func (x *CsvSettings_Quoting) HasDisabled() bool {
	if x == nil {
		return false
	}
	return x.Disabled != nil
}

func (x *CsvSettings_Quoting) HasQuoteChar() bool {
	if x == nil {
		return false
	}
	return x.QuoteChar != nil
}

func (x *CsvSettings_Quoting) HasDoubleQuoteDisabled() bool {
	if x == nil {
		return false
	}
	return x.DoubleQuoteDisabled != nil
}

func (x *CsvSettings_Quoting) ClearDisabled() {
	x.Disabled = nil
}

func (x *CsvSettings_Quoting) ClearQuoteChar() {
	x.QuoteChar = nil
}

func (x *CsvSettings_Quoting) ClearDoubleQuoteDisabled() {
	x.DoubleQuoteDisabled = nil
}

type CsvSettings_Quoting_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Disabled            *bool
	QuoteChar           []byte
	DoubleQuoteDisabled *bool
}

func (b0 CsvSettings_Quoting_builder) Build() *CsvSettings_Quoting {
	m0 := &CsvSettings_Quoting{}
	b, x := &b0, m0
	_, _ = b, x
	x.Disabled = b.Disabled
	x.QuoteChar = b.QuoteChar
	x.DoubleQuoteDisabled = b.DoubleQuoteDisabled
	return m0
}

var File_protos_ydb_formats_proto protoreflect.FileDescriptor

const file_protos_ydb_formats_proto_rawDesc = "" +
	"\n" +
	"\x18protos/ydb_formats.proto\x12\vYdb.Formats\x1a!google/protobuf/go_features.proto\",\n" +
	"\x12ArrowBatchSettings\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\fR\x06schema\"\xb5\x02\n" +
	"\vCsvSettings\x12\x1b\n" +
	"\tskip_rows\x18\x01 \x01(\rR\bskipRows\x12\x1c\n" +
	"\tdelimiter\x18\x02 \x01(\fR\tdelimiter\x12\x1d\n" +
	"\n" +
	"null_value\x18\x03 \x01(\fR\tnullValue\x12\x16\n" +
	"\x06header\x18\x04 \x01(\bR\x06header\x12:\n" +
	"\aquoting\x18\x05 \x01(\v2 .Ydb.Formats.CsvSettings.QuotingR\aquoting\x1ax\n" +
	"\aQuoting\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x1d\n" +
	"\n" +
	"quote_char\x18\x02 \x01(\fR\tquoteChar\x122\n" +
	"\x15double_quote_disabled\x18\x03 \x01(\bR\x13doubleQuoteDisabledB_\n" +
	"\x16tech.ydb.proto.formatsZ:github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Formats\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_protos_ydb_formats_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_ydb_formats_proto_goTypes = []any{
	(*ArrowBatchSettings)(nil),  // 0: Ydb.Formats.ArrowBatchSettings
	(*CsvSettings)(nil),         // 1: Ydb.Formats.CsvSettings
	(*CsvSettings_Quoting)(nil), // 2: Ydb.Formats.CsvSettings.Quoting
}
var file_protos_ydb_formats_proto_depIdxs = []int32{
	2, // 0: Ydb.Formats.CsvSettings.quoting:type_name -> Ydb.Formats.CsvSettings.Quoting
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protos_ydb_formats_proto_init() }
func file_protos_ydb_formats_proto_init() {
	if File_protos_ydb_formats_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_ydb_formats_proto_rawDesc), len(file_protos_ydb_formats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_formats_proto_goTypes,
		DependencyIndexes: file_protos_ydb_formats_proto_depIdxs,
		MessageInfos:      file_protos_ydb_formats_proto_msgTypes,
	}.Build()
	File_protos_ydb_formats_proto = out.File
	file_protos_ydb_formats_proto_goTypes = nil
	file_protos_ydb_formats_proto_depIdxs = nil
}
