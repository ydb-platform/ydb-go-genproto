// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: protos/ydb_coordination.proto

//go:build !protoopaque

package Ydb_Coordination

import (
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Scheme "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Scheme"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Consistency mode
type ConsistencyMode int32

const (
	// The default or current value
	ConsistencyMode_CONSISTENCY_MODE_UNSET ConsistencyMode = 0
	// Strict mode makes sure operations may only complete on current leader
	ConsistencyMode_CONSISTENCY_MODE_STRICT ConsistencyMode = 1
	// Relaxed mode allows operations to complete on stale masters
	ConsistencyMode_CONSISTENCY_MODE_RELAXED ConsistencyMode = 2
)

// Enum value maps for ConsistencyMode.
var (
	ConsistencyMode_name = map[int32]string{
		0: "CONSISTENCY_MODE_UNSET",
		1: "CONSISTENCY_MODE_STRICT",
		2: "CONSISTENCY_MODE_RELAXED",
	}
	ConsistencyMode_value = map[string]int32{
		"CONSISTENCY_MODE_UNSET":   0,
		"CONSISTENCY_MODE_STRICT":  1,
		"CONSISTENCY_MODE_RELAXED": 2,
	}
)

func (x ConsistencyMode) Enum() *ConsistencyMode {
	p := new(ConsistencyMode)
	*p = x
	return p
}

func (x ConsistencyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_coordination_proto_enumTypes[0].Descriptor()
}

func (ConsistencyMode) Type() protoreflect.EnumType {
	return &file_protos_ydb_coordination_proto_enumTypes[0]
}

func (x ConsistencyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// Counters mode
type RateLimiterCountersMode int32

const (
	// The default or current value
	RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_UNSET RateLimiterCountersMode = 0
	// Aggregated counters for resource tree
	RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_AGGREGATED RateLimiterCountersMode = 1
	// Counters on every resource
	RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_DETAILED RateLimiterCountersMode = 2
)

// Enum value maps for RateLimiterCountersMode.
var (
	RateLimiterCountersMode_name = map[int32]string{
		0: "RATE_LIMITER_COUNTERS_MODE_UNSET",
		1: "RATE_LIMITER_COUNTERS_MODE_AGGREGATED",
		2: "RATE_LIMITER_COUNTERS_MODE_DETAILED",
	}
	RateLimiterCountersMode_value = map[string]int32{
		"RATE_LIMITER_COUNTERS_MODE_UNSET":      0,
		"RATE_LIMITER_COUNTERS_MODE_AGGREGATED": 1,
		"RATE_LIMITER_COUNTERS_MODE_DETAILED":   2,
	}
)

func (x RateLimiterCountersMode) Enum() *RateLimiterCountersMode {
	p := new(RateLimiterCountersMode)
	*p = x
	return p
}

func (x RateLimiterCountersMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimiterCountersMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_coordination_proto_enumTypes[1].Descriptor()
}

func (RateLimiterCountersMode) Type() protoreflect.EnumType {
	return &file_protos_ydb_coordination_proto_enumTypes[1]
}

func (x RateLimiterCountersMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// Stub for unsupported messages
type Unsupported struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unsupported) Reset() {
	*x = Unsupported{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsupported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsupported) ProtoMessage() {}

func (x *Unsupported) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Unsupported_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Unsupported_builder) Build() *Unsupported {
	m0 := &Unsupported{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// *
// Configuration settings for a coordination node
type Config struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Initialized on creation, cannot be set
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Period in milliseconds for self-checks (default 1 second)
	SelfCheckPeriodMillis *uint32 `protobuf:"varint,2,opt,name=self_check_period_millis,json=selfCheckPeriodMillis" json:"self_check_period_millis,omitempty"`
	// Grace period for sessions on leader change (default 10 seconds)
	SessionGracePeriodMillis *uint32 `protobuf:"varint,3,opt,name=session_grace_period_millis,json=sessionGracePeriodMillis" json:"session_grace_period_millis,omitempty"`
	// Concistency mode for read operations
	ReadConsistencyMode *ConsistencyMode `protobuf:"varint,4,opt,name=read_consistency_mode,json=readConsistencyMode,enum=Ydb.Coordination.ConsistencyMode" json:"read_consistency_mode,omitempty"`
	// Consistency mode for attach operations
	AttachConsistencyMode *ConsistencyMode `protobuf:"varint,5,opt,name=attach_consistency_mode,json=attachConsistencyMode,enum=Ydb.Coordination.ConsistencyMode" json:"attach_consistency_mode,omitempty"`
	// Rate limiter counters mode
	RateLimiterCountersMode *RateLimiterCountersMode `protobuf:"varint,6,opt,name=rate_limiter_counters_mode,json=rateLimiterCountersMode,enum=Ydb.Coordination.RateLimiterCountersMode" json:"rate_limiter_counters_mode,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Config) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Config) GetSelfCheckPeriodMillis() uint32 {
	if x != nil && x.SelfCheckPeriodMillis != nil {
		return *x.SelfCheckPeriodMillis
	}
	return 0
}

func (x *Config) GetSessionGracePeriodMillis() uint32 {
	if x != nil && x.SessionGracePeriodMillis != nil {
		return *x.SessionGracePeriodMillis
	}
	return 0
}

func (x *Config) GetReadConsistencyMode() ConsistencyMode {
	if x != nil && x.ReadConsistencyMode != nil {
		return *x.ReadConsistencyMode
	}
	return ConsistencyMode_CONSISTENCY_MODE_UNSET
}

func (x *Config) GetAttachConsistencyMode() ConsistencyMode {
	if x != nil && x.AttachConsistencyMode != nil {
		return *x.AttachConsistencyMode
	}
	return ConsistencyMode_CONSISTENCY_MODE_UNSET
}

func (x *Config) GetRateLimiterCountersMode() RateLimiterCountersMode {
	if x != nil && x.RateLimiterCountersMode != nil {
		return *x.RateLimiterCountersMode
	}
	return RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_UNSET
}

func (x *Config) SetPath(v string) {
	x.Path = &v
}

func (x *Config) SetSelfCheckPeriodMillis(v uint32) {
	x.SelfCheckPeriodMillis = &v
}

func (x *Config) SetSessionGracePeriodMillis(v uint32) {
	x.SessionGracePeriodMillis = &v
}

func (x *Config) SetReadConsistencyMode(v ConsistencyMode) {
	x.ReadConsistencyMode = &v
}

func (x *Config) SetAttachConsistencyMode(v ConsistencyMode) {
	x.AttachConsistencyMode = &v
}

func (x *Config) SetRateLimiterCountersMode(v RateLimiterCountersMode) {
	x.RateLimiterCountersMode = &v
}

func (x *Config) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *Config) HasSelfCheckPeriodMillis() bool {
	if x == nil {
		return false
	}
	return x.SelfCheckPeriodMillis != nil
}

func (x *Config) HasSessionGracePeriodMillis() bool {
	if x == nil {
		return false
	}
	return x.SessionGracePeriodMillis != nil
}

func (x *Config) HasReadConsistencyMode() bool {
	if x == nil {
		return false
	}
	return x.ReadConsistencyMode != nil
}

func (x *Config) HasAttachConsistencyMode() bool {
	if x == nil {
		return false
	}
	return x.AttachConsistencyMode != nil
}

func (x *Config) HasRateLimiterCountersMode() bool {
	if x == nil {
		return false
	}
	return x.RateLimiterCountersMode != nil
}

func (x *Config) ClearPath() {
	x.Path = nil
}

func (x *Config) ClearSelfCheckPeriodMillis() {
	x.SelfCheckPeriodMillis = nil
}

func (x *Config) ClearSessionGracePeriodMillis() {
	x.SessionGracePeriodMillis = nil
}

func (x *Config) ClearReadConsistencyMode() {
	x.ReadConsistencyMode = nil
}

func (x *Config) ClearAttachConsistencyMode() {
	x.AttachConsistencyMode = nil
}

func (x *Config) ClearRateLimiterCountersMode() {
	x.RateLimiterCountersMode = nil
}

type Config_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Initialized on creation, cannot be set
	Path *string
	// Period in milliseconds for self-checks (default 1 second)
	SelfCheckPeriodMillis *uint32
	// Grace period for sessions on leader change (default 10 seconds)
	SessionGracePeriodMillis *uint32
	// Concistency mode for read operations
	ReadConsistencyMode *ConsistencyMode
	// Consistency mode for attach operations
	AttachConsistencyMode *ConsistencyMode
	// Rate limiter counters mode
	RateLimiterCountersMode *RateLimiterCountersMode
}

func (b0 Config_builder) Build() *Config {
	m0 := &Config{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.SelfCheckPeriodMillis = b.SelfCheckPeriodMillis
	x.SessionGracePeriodMillis = b.SessionGracePeriodMillis
	x.ReadConsistencyMode = b.ReadConsistencyMode
	x.AttachConsistencyMode = b.AttachConsistencyMode
	x.RateLimiterCountersMode = b.RateLimiterCountersMode
	return m0
}

// *
// Describes an active client session
type SessionDescription struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Session id generated by the server
	SessionId *uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Expiration timeout of the session
	TimeoutMillis *uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis" json:"timeout_millis,omitempty"`
	// User-specified description of this session
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// True if this session is currently attached to a client
	Attached      *bool `protobuf:"varint,4,opt,name=attached" json:"attached,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionDescription) Reset() {
	*x = SessionDescription{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDescription) ProtoMessage() {}

func (x *SessionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionDescription) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *SessionDescription) GetTimeoutMillis() uint64 {
	if x != nil && x.TimeoutMillis != nil {
		return *x.TimeoutMillis
	}
	return 0
}

func (x *SessionDescription) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SessionDescription) GetAttached() bool {
	if x != nil && x.Attached != nil {
		return *x.Attached
	}
	return false
}

func (x *SessionDescription) SetSessionId(v uint64) {
	x.SessionId = &v
}

func (x *SessionDescription) SetTimeoutMillis(v uint64) {
	x.TimeoutMillis = &v
}

func (x *SessionDescription) SetDescription(v string) {
	x.Description = &v
}

func (x *SessionDescription) SetAttached(v bool) {
	x.Attached = &v
}

func (x *SessionDescription) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *SessionDescription) HasTimeoutMillis() bool {
	if x == nil {
		return false
	}
	return x.TimeoutMillis != nil
}

func (x *SessionDescription) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *SessionDescription) HasAttached() bool {
	if x == nil {
		return false
	}
	return x.Attached != nil
}

func (x *SessionDescription) ClearSessionId() {
	x.SessionId = nil
}

func (x *SessionDescription) ClearTimeoutMillis() {
	x.TimeoutMillis = nil
}

func (x *SessionDescription) ClearDescription() {
	x.Description = nil
}

func (x *SessionDescription) ClearAttached() {
	x.Attached = nil
}

type SessionDescription_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Session id generated by the server
	SessionId *uint64
	// Expiration timeout of the session
	TimeoutMillis *uint64
	// User-specified description of this session
	Description *string
	// True if this session is currently attached to a client
	Attached *bool
}

func (b0 SessionDescription_builder) Build() *SessionDescription {
	m0 := &SessionDescription{}
	b, x := &b0, m0
	_, _ = b, x
	x.SessionId = b.SessionId
	x.TimeoutMillis = b.TimeoutMillis
	x.Description = b.Description
	x.Attached = b.Attached
	return m0
}

// *
// Describes an owner or a waiter of this semaphore
type SemaphoreSession struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A monotonically increasing id which determines locking order
	OrderId *uint64 `protobuf:"varint,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// An id of the session which tried to acquire the semaphore
	SessionId *uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// A timeout in milliseconds for operation in waiters queue
	TimeoutMillis *uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis" json:"timeout_millis,omitempty"`
	// Number of tokens for an acquire operation
	Count *uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	// User-defined data attached to the acquire operation
	Data          []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemaphoreSession) Reset() {
	*x = SemaphoreSession{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoreSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreSession) ProtoMessage() {}

func (x *SemaphoreSession) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SemaphoreSession) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *SemaphoreSession) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *SemaphoreSession) GetTimeoutMillis() uint64 {
	if x != nil && x.TimeoutMillis != nil {
		return *x.TimeoutMillis
	}
	return 0
}

func (x *SemaphoreSession) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SemaphoreSession) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SemaphoreSession) SetOrderId(v uint64) {
	x.OrderId = &v
}

func (x *SemaphoreSession) SetSessionId(v uint64) {
	x.SessionId = &v
}

func (x *SemaphoreSession) SetTimeoutMillis(v uint64) {
	x.TimeoutMillis = &v
}

func (x *SemaphoreSession) SetCount(v uint64) {
	x.Count = &v
}

func (x *SemaphoreSession) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Data = v
}

func (x *SemaphoreSession) HasOrderId() bool {
	if x == nil {
		return false
	}
	return x.OrderId != nil
}

func (x *SemaphoreSession) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *SemaphoreSession) HasTimeoutMillis() bool {
	if x == nil {
		return false
	}
	return x.TimeoutMillis != nil
}

func (x *SemaphoreSession) HasCount() bool {
	if x == nil {
		return false
	}
	return x.Count != nil
}

func (x *SemaphoreSession) HasData() bool {
	if x == nil {
		return false
	}
	return x.Data != nil
}

func (x *SemaphoreSession) ClearOrderId() {
	x.OrderId = nil
}

func (x *SemaphoreSession) ClearSessionId() {
	x.SessionId = nil
}

func (x *SemaphoreSession) ClearTimeoutMillis() {
	x.TimeoutMillis = nil
}

func (x *SemaphoreSession) ClearCount() {
	x.Count = nil
}

func (x *SemaphoreSession) ClearData() {
	x.Data = nil
}

type SemaphoreSession_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A monotonically increasing id which determines locking order
	OrderId *uint64
	// An id of the session which tried to acquire the semaphore
	SessionId *uint64
	// A timeout in milliseconds for operation in waiters queue
	TimeoutMillis *uint64
	// Number of tokens for an acquire operation
	Count *uint64
	// User-defined data attached to the acquire operation
	Data []byte
}

func (b0 SemaphoreSession_builder) Build() *SemaphoreSession {
	m0 := &SemaphoreSession{}
	b, x := &b0, m0
	_, _ = b, x
	x.OrderId = b.OrderId
	x.SessionId = b.SessionId
	x.TimeoutMillis = b.TimeoutMillis
	x.Count = b.Count
	x.Data = b.Data
	return m0
}

// *
// Describes the state of a semaphore
type SemaphoreDescription struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Name of the semaphore
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// User-defined data attached to the semaphore
	Data []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Number of tokens currently acquired by owners
	Count *uint64 `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	// Maximum number of tokens that may acquired
	Limit *uint64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Ephemeral semaphores are deleted when released by all owners and waiters
	Ephemeral *bool `protobuf:"varint,4,opt,name=ephemeral" json:"ephemeral,omitempty"`
	// A list of current owners of the semaphore
	Owners []*SemaphoreSession `protobuf:"bytes,5,rep,name=owners" json:"owners,omitempty"`
	// A list of current waiters on the semaphore
	Waiters       []*SemaphoreSession `protobuf:"bytes,6,rep,name=waiters" json:"waiters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemaphoreDescription) Reset() {
	*x = SemaphoreDescription{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemaphoreDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreDescription) ProtoMessage() {}

func (x *SemaphoreDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SemaphoreDescription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SemaphoreDescription) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SemaphoreDescription) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SemaphoreDescription) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SemaphoreDescription) GetEphemeral() bool {
	if x != nil && x.Ephemeral != nil {
		return *x.Ephemeral
	}
	return false
}

func (x *SemaphoreDescription) GetOwners() []*SemaphoreSession {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *SemaphoreDescription) GetWaiters() []*SemaphoreSession {
	if x != nil {
		return x.Waiters
	}
	return nil
}

func (x *SemaphoreDescription) SetName(v string) {
	x.Name = &v
}

func (x *SemaphoreDescription) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Data = v
}

func (x *SemaphoreDescription) SetCount(v uint64) {
	x.Count = &v
}

func (x *SemaphoreDescription) SetLimit(v uint64) {
	x.Limit = &v
}

func (x *SemaphoreDescription) SetEphemeral(v bool) {
	x.Ephemeral = &v
}

func (x *SemaphoreDescription) SetOwners(v []*SemaphoreSession) {
	x.Owners = v
}

func (x *SemaphoreDescription) SetWaiters(v []*SemaphoreSession) {
	x.Waiters = v
}

func (x *SemaphoreDescription) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SemaphoreDescription) HasData() bool {
	if x == nil {
		return false
	}
	return x.Data != nil
}

func (x *SemaphoreDescription) HasCount() bool {
	if x == nil {
		return false
	}
	return x.Count != nil
}

func (x *SemaphoreDescription) HasLimit() bool {
	if x == nil {
		return false
	}
	return x.Limit != nil
}

func (x *SemaphoreDescription) HasEphemeral() bool {
	if x == nil {
		return false
	}
	return x.Ephemeral != nil
}

func (x *SemaphoreDescription) ClearName() {
	x.Name = nil
}

func (x *SemaphoreDescription) ClearData() {
	x.Data = nil
}

func (x *SemaphoreDescription) ClearCount() {
	x.Count = nil
}

func (x *SemaphoreDescription) ClearLimit() {
	x.Limit = nil
}

func (x *SemaphoreDescription) ClearEphemeral() {
	x.Ephemeral = nil
}

type SemaphoreDescription_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Name of the semaphore
	Name *string
	// User-defined data attached to the semaphore
	Data []byte
	// Number of tokens currently acquired by owners
	Count *uint64
	// Maximum number of tokens that may acquired
	Limit *uint64
	// Ephemeral semaphores are deleted when released by all owners and waiters
	Ephemeral *bool
	// A list of current owners of the semaphore
	Owners []*SemaphoreSession
	// A list of current waiters on the semaphore
	Waiters []*SemaphoreSession
}

func (b0 SemaphoreDescription_builder) Build() *SemaphoreDescription {
	m0 := &SemaphoreDescription{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Data = b.Data
	x.Count = b.Count
	x.Limit = b.Limit
	x.Ephemeral = b.Ephemeral
	x.Owners = b.Owners
	x.Waiters = b.Waiters
	return m0
}

// *
// Session request message sent from client to server
type SessionRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*SessionRequest_Ping
	//	*SessionRequest_Pong
	//	*SessionRequest_SessionStart_
	//	*SessionRequest_SessionStop_
	//	*SessionRequest_Unsupported_5
	//	*SessionRequest_Unsupported_6
	//	*SessionRequest_AcquireSemaphore_
	//	*SessionRequest_ReleaseSemaphore_
	//	*SessionRequest_DescribeSemaphore_
	//	*SessionRequest_CreateSemaphore_
	//	*SessionRequest_UpdateSemaphore_
	//	*SessionRequest_DeleteSemaphore_
	//	*SessionRequest_Unsupported_13
	//	*SessionRequest_Unsupported_14
	//	*SessionRequest_Unsupported_15
	Request       isSessionRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest) GetRequest() isSessionRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SessionRequest) GetPing() *SessionRequest_PingPong {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *SessionRequest) GetPong() *SessionRequest_PingPong {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

func (x *SessionRequest) GetSessionStart() *SessionRequest_SessionStart {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_SessionStart_); ok {
			return x.SessionStart
		}
	}
	return nil
}

func (x *SessionRequest) GetSessionStop() *SessionRequest_SessionStop {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_SessionStop_); ok {
			return x.SessionStop
		}
	}
	return nil
}

func (x *SessionRequest) GetUnsupported_5() *Unsupported {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Unsupported_5); ok {
			return x.Unsupported_5
		}
	}
	return nil
}

func (x *SessionRequest) GetUnsupported_6() *Unsupported {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Unsupported_6); ok {
			return x.Unsupported_6
		}
	}
	return nil
}

func (x *SessionRequest) GetAcquireSemaphore() *SessionRequest_AcquireSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_AcquireSemaphore_); ok {
			return x.AcquireSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetReleaseSemaphore() *SessionRequest_ReleaseSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_ReleaseSemaphore_); ok {
			return x.ReleaseSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetDescribeSemaphore() *SessionRequest_DescribeSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_DescribeSemaphore_); ok {
			return x.DescribeSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetCreateSemaphore() *SessionRequest_CreateSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_CreateSemaphore_); ok {
			return x.CreateSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetUpdateSemaphore() *SessionRequest_UpdateSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_UpdateSemaphore_); ok {
			return x.UpdateSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetDeleteSemaphore() *SessionRequest_DeleteSemaphore {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_DeleteSemaphore_); ok {
			return x.DeleteSemaphore
		}
	}
	return nil
}

func (x *SessionRequest) GetUnsupported_13() *Unsupported {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Unsupported_13); ok {
			return x.Unsupported_13
		}
	}
	return nil
}

func (x *SessionRequest) GetUnsupported_14() *Unsupported {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Unsupported_14); ok {
			return x.Unsupported_14
		}
	}
	return nil
}

func (x *SessionRequest) GetUnsupported_15() *Unsupported {
	if x != nil {
		if x, ok := x.Request.(*SessionRequest_Unsupported_15); ok {
			return x.Unsupported_15
		}
	}
	return nil
}

func (x *SessionRequest) SetPing(v *SessionRequest_PingPong) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Ping{v}
}

func (x *SessionRequest) SetPong(v *SessionRequest_PingPong) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Pong{v}
}

func (x *SessionRequest) SetSessionStart(v *SessionRequest_SessionStart) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_SessionStart_{v}
}

func (x *SessionRequest) SetSessionStop(v *SessionRequest_SessionStop) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_SessionStop_{v}
}

func (x *SessionRequest) SetUnsupported_5(v *Unsupported) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Unsupported_5{v}
}

func (x *SessionRequest) SetUnsupported_6(v *Unsupported) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Unsupported_6{v}
}

func (x *SessionRequest) SetAcquireSemaphore(v *SessionRequest_AcquireSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_AcquireSemaphore_{v}
}

func (x *SessionRequest) SetReleaseSemaphore(v *SessionRequest_ReleaseSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_ReleaseSemaphore_{v}
}

func (x *SessionRequest) SetDescribeSemaphore(v *SessionRequest_DescribeSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_DescribeSemaphore_{v}
}

func (x *SessionRequest) SetCreateSemaphore(v *SessionRequest_CreateSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_CreateSemaphore_{v}
}

func (x *SessionRequest) SetUpdateSemaphore(v *SessionRequest_UpdateSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_UpdateSemaphore_{v}
}

func (x *SessionRequest) SetDeleteSemaphore(v *SessionRequest_DeleteSemaphore) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_DeleteSemaphore_{v}
}

func (x *SessionRequest) SetUnsupported_13(v *Unsupported) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Unsupported_13{v}
}

func (x *SessionRequest) SetUnsupported_14(v *Unsupported) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Unsupported_14{v}
}

func (x *SessionRequest) SetUnsupported_15(v *Unsupported) {
	if v == nil {
		x.Request = nil
		return
	}
	x.Request = &SessionRequest_Unsupported_15{v}
}

func (x *SessionRequest) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.Request != nil
}

func (x *SessionRequest) HasPing() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Ping)
	return ok
}

func (x *SessionRequest) HasPong() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Pong)
	return ok
}

func (x *SessionRequest) HasSessionStart() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_SessionStart_)
	return ok
}

func (x *SessionRequest) HasSessionStop() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_SessionStop_)
	return ok
}

func (x *SessionRequest) HasUnsupported_5() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Unsupported_5)
	return ok
}

func (x *SessionRequest) HasUnsupported_6() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Unsupported_6)
	return ok
}

func (x *SessionRequest) HasAcquireSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_AcquireSemaphore_)
	return ok
}

func (x *SessionRequest) HasReleaseSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_ReleaseSemaphore_)
	return ok
}

func (x *SessionRequest) HasDescribeSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_DescribeSemaphore_)
	return ok
}

func (x *SessionRequest) HasCreateSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_CreateSemaphore_)
	return ok
}

func (x *SessionRequest) HasUpdateSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_UpdateSemaphore_)
	return ok
}

func (x *SessionRequest) HasDeleteSemaphore() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_DeleteSemaphore_)
	return ok
}

func (x *SessionRequest) HasUnsupported_13() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Unsupported_13)
	return ok
}

func (x *SessionRequest) HasUnsupported_14() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Unsupported_14)
	return ok
}

func (x *SessionRequest) HasUnsupported_15() bool {
	if x == nil {
		return false
	}
	_, ok := x.Request.(*SessionRequest_Unsupported_15)
	return ok
}

func (x *SessionRequest) ClearRequest() {
	x.Request = nil
}

func (x *SessionRequest) ClearPing() {
	if _, ok := x.Request.(*SessionRequest_Ping); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearPong() {
	if _, ok := x.Request.(*SessionRequest_Pong); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearSessionStart() {
	if _, ok := x.Request.(*SessionRequest_SessionStart_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearSessionStop() {
	if _, ok := x.Request.(*SessionRequest_SessionStop_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUnsupported_5() {
	if _, ok := x.Request.(*SessionRequest_Unsupported_5); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUnsupported_6() {
	if _, ok := x.Request.(*SessionRequest_Unsupported_6); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearAcquireSemaphore() {
	if _, ok := x.Request.(*SessionRequest_AcquireSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearReleaseSemaphore() {
	if _, ok := x.Request.(*SessionRequest_ReleaseSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearDescribeSemaphore() {
	if _, ok := x.Request.(*SessionRequest_DescribeSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearCreateSemaphore() {
	if _, ok := x.Request.(*SessionRequest_CreateSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUpdateSemaphore() {
	if _, ok := x.Request.(*SessionRequest_UpdateSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearDeleteSemaphore() {
	if _, ok := x.Request.(*SessionRequest_DeleteSemaphore_); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUnsupported_13() {
	if _, ok := x.Request.(*SessionRequest_Unsupported_13); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUnsupported_14() {
	if _, ok := x.Request.(*SessionRequest_Unsupported_14); ok {
		x.Request = nil
	}
}

func (x *SessionRequest) ClearUnsupported_15() {
	if _, ok := x.Request.(*SessionRequest_Unsupported_15); ok {
		x.Request = nil
	}
}

const SessionRequest_Request_not_set_case case_SessionRequest_Request = 0
const SessionRequest_Ping_case case_SessionRequest_Request = 1
const SessionRequest_Pong_case case_SessionRequest_Request = 2
const SessionRequest_SessionStart_case case_SessionRequest_Request = 3
const SessionRequest_SessionStop_case case_SessionRequest_Request = 4
const SessionRequest_Unsupported_5_case case_SessionRequest_Request = 5
const SessionRequest_Unsupported_6_case case_SessionRequest_Request = 6
const SessionRequest_AcquireSemaphore_case case_SessionRequest_Request = 7
const SessionRequest_ReleaseSemaphore_case case_SessionRequest_Request = 8
const SessionRequest_DescribeSemaphore_case case_SessionRequest_Request = 9
const SessionRequest_CreateSemaphore_case case_SessionRequest_Request = 10
const SessionRequest_UpdateSemaphore_case case_SessionRequest_Request = 11
const SessionRequest_DeleteSemaphore_case case_SessionRequest_Request = 12
const SessionRequest_Unsupported_13_case case_SessionRequest_Request = 13
const SessionRequest_Unsupported_14_case case_SessionRequest_Request = 14
const SessionRequest_Unsupported_15_case case_SessionRequest_Request = 15

func (x *SessionRequest) WhichRequest() case_SessionRequest_Request {
	if x == nil {
		return SessionRequest_Request_not_set_case
	}
	switch x.Request.(type) {
	case *SessionRequest_Ping:
		return SessionRequest_Ping_case
	case *SessionRequest_Pong:
		return SessionRequest_Pong_case
	case *SessionRequest_SessionStart_:
		return SessionRequest_SessionStart_case
	case *SessionRequest_SessionStop_:
		return SessionRequest_SessionStop_case
	case *SessionRequest_Unsupported_5:
		return SessionRequest_Unsupported_5_case
	case *SessionRequest_Unsupported_6:
		return SessionRequest_Unsupported_6_case
	case *SessionRequest_AcquireSemaphore_:
		return SessionRequest_AcquireSemaphore_case
	case *SessionRequest_ReleaseSemaphore_:
		return SessionRequest_ReleaseSemaphore_case
	case *SessionRequest_DescribeSemaphore_:
		return SessionRequest_DescribeSemaphore_case
	case *SessionRequest_CreateSemaphore_:
		return SessionRequest_CreateSemaphore_case
	case *SessionRequest_UpdateSemaphore_:
		return SessionRequest_UpdateSemaphore_case
	case *SessionRequest_DeleteSemaphore_:
		return SessionRequest_DeleteSemaphore_case
	case *SessionRequest_Unsupported_13:
		return SessionRequest_Unsupported_13_case
	case *SessionRequest_Unsupported_14:
		return SessionRequest_Unsupported_14_case
	case *SessionRequest_Unsupported_15:
		return SessionRequest_Unsupported_15_case
	default:
		return SessionRequest_Request_not_set_case
	}
}

type SessionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Request:
	Ping              *SessionRequest_PingPong
	Pong              *SessionRequest_PingPong
	SessionStart      *SessionRequest_SessionStart
	SessionStop       *SessionRequest_SessionStop
	Unsupported_5     *Unsupported
	Unsupported_6     *Unsupported
	AcquireSemaphore  *SessionRequest_AcquireSemaphore
	ReleaseSemaphore  *SessionRequest_ReleaseSemaphore
	DescribeSemaphore *SessionRequest_DescribeSemaphore
	CreateSemaphore   *SessionRequest_CreateSemaphore
	UpdateSemaphore   *SessionRequest_UpdateSemaphore
	DeleteSemaphore   *SessionRequest_DeleteSemaphore
	Unsupported_13    *Unsupported
	Unsupported_14    *Unsupported
	Unsupported_15    *Unsupported
	// -- end of Request
}

func (b0 SessionRequest_builder) Build() *SessionRequest {
	m0 := &SessionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Ping != nil {
		x.Request = &SessionRequest_Ping{b.Ping}
	}
	if b.Pong != nil {
		x.Request = &SessionRequest_Pong{b.Pong}
	}
	if b.SessionStart != nil {
		x.Request = &SessionRequest_SessionStart_{b.SessionStart}
	}
	if b.SessionStop != nil {
		x.Request = &SessionRequest_SessionStop_{b.SessionStop}
	}
	if b.Unsupported_5 != nil {
		x.Request = &SessionRequest_Unsupported_5{b.Unsupported_5}
	}
	if b.Unsupported_6 != nil {
		x.Request = &SessionRequest_Unsupported_6{b.Unsupported_6}
	}
	if b.AcquireSemaphore != nil {
		x.Request = &SessionRequest_AcquireSemaphore_{b.AcquireSemaphore}
	}
	if b.ReleaseSemaphore != nil {
		x.Request = &SessionRequest_ReleaseSemaphore_{b.ReleaseSemaphore}
	}
	if b.DescribeSemaphore != nil {
		x.Request = &SessionRequest_DescribeSemaphore_{b.DescribeSemaphore}
	}
	if b.CreateSemaphore != nil {
		x.Request = &SessionRequest_CreateSemaphore_{b.CreateSemaphore}
	}
	if b.UpdateSemaphore != nil {
		x.Request = &SessionRequest_UpdateSemaphore_{b.UpdateSemaphore}
	}
	if b.DeleteSemaphore != nil {
		x.Request = &SessionRequest_DeleteSemaphore_{b.DeleteSemaphore}
	}
	if b.Unsupported_13 != nil {
		x.Request = &SessionRequest_Unsupported_13{b.Unsupported_13}
	}
	if b.Unsupported_14 != nil {
		x.Request = &SessionRequest_Unsupported_14{b.Unsupported_14}
	}
	if b.Unsupported_15 != nil {
		x.Request = &SessionRequest_Unsupported_15{b.Unsupported_15}
	}
	return m0
}

type case_SessionRequest_Request protoreflect.FieldNumber

func (x case_SessionRequest_Request) String() string {
	md := file_protos_ydb_coordination_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSessionRequest_Request interface {
	isSessionRequest_Request()
}

type SessionRequest_Ping struct {
	Ping *SessionRequest_PingPong `protobuf:"bytes,1,opt,name=ping,oneof"`
}

type SessionRequest_Pong struct {
	Pong *SessionRequest_PingPong `protobuf:"bytes,2,opt,name=pong,oneof"`
}

type SessionRequest_SessionStart_ struct {
	SessionStart *SessionRequest_SessionStart `protobuf:"bytes,3,opt,name=session_start,json=sessionStart,oneof"`
}

type SessionRequest_SessionStop_ struct {
	SessionStop *SessionRequest_SessionStop `protobuf:"bytes,4,opt,name=session_stop,json=sessionStop,oneof"`
}

type SessionRequest_Unsupported_5 struct {
	Unsupported_5 *Unsupported `protobuf:"bytes,5,opt,name=unsupported_5,json=unsupported5,oneof"`
}

type SessionRequest_Unsupported_6 struct {
	Unsupported_6 *Unsupported `protobuf:"bytes,6,opt,name=unsupported_6,json=unsupported6,oneof"`
}

type SessionRequest_AcquireSemaphore_ struct {
	AcquireSemaphore *SessionRequest_AcquireSemaphore `protobuf:"bytes,7,opt,name=acquire_semaphore,json=acquireSemaphore,oneof"`
}

type SessionRequest_ReleaseSemaphore_ struct {
	ReleaseSemaphore *SessionRequest_ReleaseSemaphore `protobuf:"bytes,8,opt,name=release_semaphore,json=releaseSemaphore,oneof"`
}

type SessionRequest_DescribeSemaphore_ struct {
	DescribeSemaphore *SessionRequest_DescribeSemaphore `protobuf:"bytes,9,opt,name=describe_semaphore,json=describeSemaphore,oneof"`
}

type SessionRequest_CreateSemaphore_ struct {
	CreateSemaphore *SessionRequest_CreateSemaphore `protobuf:"bytes,10,opt,name=create_semaphore,json=createSemaphore,oneof"`
}

type SessionRequest_UpdateSemaphore_ struct {
	UpdateSemaphore *SessionRequest_UpdateSemaphore `protobuf:"bytes,11,opt,name=update_semaphore,json=updateSemaphore,oneof"`
}

type SessionRequest_DeleteSemaphore_ struct {
	DeleteSemaphore *SessionRequest_DeleteSemaphore `protobuf:"bytes,12,opt,name=delete_semaphore,json=deleteSemaphore,oneof"`
}

type SessionRequest_Unsupported_13 struct {
	Unsupported_13 *Unsupported `protobuf:"bytes,13,opt,name=unsupported_13,json=unsupported13,oneof"`
}

type SessionRequest_Unsupported_14 struct {
	Unsupported_14 *Unsupported `protobuf:"bytes,14,opt,name=unsupported_14,json=unsupported14,oneof"`
}

type SessionRequest_Unsupported_15 struct {
	Unsupported_15 *Unsupported `protobuf:"bytes,15,opt,name=unsupported_15,json=unsupported15,oneof"`
}

func (*SessionRequest_Ping) isSessionRequest_Request() {}

func (*SessionRequest_Pong) isSessionRequest_Request() {}

func (*SessionRequest_SessionStart_) isSessionRequest_Request() {}

func (*SessionRequest_SessionStop_) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_5) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_6) isSessionRequest_Request() {}

func (*SessionRequest_AcquireSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_ReleaseSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_DescribeSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_CreateSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_UpdateSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_DeleteSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_13) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_14) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_15) isSessionRequest_Request() {}

// *
// Session response message sent from server to client
type SessionResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SessionResponse_Ping
	//	*SessionResponse_Pong
	//	*SessionResponse_Failure_
	//	*SessionResponse_SessionStarted_
	//	*SessionResponse_SessionStopped_
	//	*SessionResponse_Unsupported_6
	//	*SessionResponse_Unsupported_7
	//	*SessionResponse_AcquireSemaphorePending_
	//	*SessionResponse_AcquireSemaphoreResult_
	//	*SessionResponse_ReleaseSemaphoreResult_
	//	*SessionResponse_DescribeSemaphoreResult_
	//	*SessionResponse_DescribeSemaphoreChanged_
	//	*SessionResponse_CreateSemaphoreResult_
	//	*SessionResponse_UpdateSemaphoreResult_
	//	*SessionResponse_DeleteSemaphoreResult_
	//	*SessionResponse_Unsupported_16
	//	*SessionResponse_Unsupported_17
	//	*SessionResponse_Unsupported_18
	Response      isSessionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse) GetResponse() isSessionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SessionResponse) GetPing() *SessionResponse_PingPong {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *SessionResponse) GetPong() *SessionResponse_PingPong {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

func (x *SessionResponse) GetFailure() *SessionResponse_Failure {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Failure_); ok {
			return x.Failure
		}
	}
	return nil
}

func (x *SessionResponse) GetSessionStarted() *SessionResponse_SessionStarted {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_SessionStarted_); ok {
			return x.SessionStarted
		}
	}
	return nil
}

func (x *SessionResponse) GetSessionStopped() *SessionResponse_SessionStopped {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_SessionStopped_); ok {
			return x.SessionStopped
		}
	}
	return nil
}

func (x *SessionResponse) GetUnsupported_6() *Unsupported {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Unsupported_6); ok {
			return x.Unsupported_6
		}
	}
	return nil
}

func (x *SessionResponse) GetUnsupported_7() *Unsupported {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Unsupported_7); ok {
			return x.Unsupported_7
		}
	}
	return nil
}

func (x *SessionResponse) GetAcquireSemaphorePending() *SessionResponse_AcquireSemaphorePending {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_AcquireSemaphorePending_); ok {
			return x.AcquireSemaphorePending
		}
	}
	return nil
}

func (x *SessionResponse) GetAcquireSemaphoreResult() *SessionResponse_AcquireSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_AcquireSemaphoreResult_); ok {
			return x.AcquireSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetReleaseSemaphoreResult() *SessionResponse_ReleaseSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_ReleaseSemaphoreResult_); ok {
			return x.ReleaseSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetDescribeSemaphoreResult() *SessionResponse_DescribeSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_DescribeSemaphoreResult_); ok {
			return x.DescribeSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetDescribeSemaphoreChanged() *SessionResponse_DescribeSemaphoreChanged {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_DescribeSemaphoreChanged_); ok {
			return x.DescribeSemaphoreChanged
		}
	}
	return nil
}

func (x *SessionResponse) GetCreateSemaphoreResult() *SessionResponse_CreateSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_CreateSemaphoreResult_); ok {
			return x.CreateSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetUpdateSemaphoreResult() *SessionResponse_UpdateSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_UpdateSemaphoreResult_); ok {
			return x.UpdateSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetDeleteSemaphoreResult() *SessionResponse_DeleteSemaphoreResult {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_DeleteSemaphoreResult_); ok {
			return x.DeleteSemaphoreResult
		}
	}
	return nil
}

func (x *SessionResponse) GetUnsupported_16() *Unsupported {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Unsupported_16); ok {
			return x.Unsupported_16
		}
	}
	return nil
}

func (x *SessionResponse) GetUnsupported_17() *Unsupported {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Unsupported_17); ok {
			return x.Unsupported_17
		}
	}
	return nil
}

func (x *SessionResponse) GetUnsupported_18() *Unsupported {
	if x != nil {
		if x, ok := x.Response.(*SessionResponse_Unsupported_18); ok {
			return x.Unsupported_18
		}
	}
	return nil
}

func (x *SessionResponse) SetPing(v *SessionResponse_PingPong) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Ping{v}
}

func (x *SessionResponse) SetPong(v *SessionResponse_PingPong) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Pong{v}
}

func (x *SessionResponse) SetFailure(v *SessionResponse_Failure) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Failure_{v}
}

func (x *SessionResponse) SetSessionStarted(v *SessionResponse_SessionStarted) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_SessionStarted_{v}
}

func (x *SessionResponse) SetSessionStopped(v *SessionResponse_SessionStopped) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_SessionStopped_{v}
}

func (x *SessionResponse) SetUnsupported_6(v *Unsupported) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Unsupported_6{v}
}

func (x *SessionResponse) SetUnsupported_7(v *Unsupported) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Unsupported_7{v}
}

func (x *SessionResponse) SetAcquireSemaphorePending(v *SessionResponse_AcquireSemaphorePending) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_AcquireSemaphorePending_{v}
}

func (x *SessionResponse) SetAcquireSemaphoreResult(v *SessionResponse_AcquireSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_AcquireSemaphoreResult_{v}
}

func (x *SessionResponse) SetReleaseSemaphoreResult(v *SessionResponse_ReleaseSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_ReleaseSemaphoreResult_{v}
}

func (x *SessionResponse) SetDescribeSemaphoreResult(v *SessionResponse_DescribeSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_DescribeSemaphoreResult_{v}
}

func (x *SessionResponse) SetDescribeSemaphoreChanged(v *SessionResponse_DescribeSemaphoreChanged) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_DescribeSemaphoreChanged_{v}
}

func (x *SessionResponse) SetCreateSemaphoreResult(v *SessionResponse_CreateSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_CreateSemaphoreResult_{v}
}

func (x *SessionResponse) SetUpdateSemaphoreResult(v *SessionResponse_UpdateSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_UpdateSemaphoreResult_{v}
}

func (x *SessionResponse) SetDeleteSemaphoreResult(v *SessionResponse_DeleteSemaphoreResult) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_DeleteSemaphoreResult_{v}
}

func (x *SessionResponse) SetUnsupported_16(v *Unsupported) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Unsupported_16{v}
}

func (x *SessionResponse) SetUnsupported_17(v *Unsupported) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Unsupported_17{v}
}

func (x *SessionResponse) SetUnsupported_18(v *Unsupported) {
	if v == nil {
		x.Response = nil
		return
	}
	x.Response = &SessionResponse_Unsupported_18{v}
}

func (x *SessionResponse) HasResponse() bool {
	if x == nil {
		return false
	}
	return x.Response != nil
}

func (x *SessionResponse) HasPing() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Ping)
	return ok
}

func (x *SessionResponse) HasPong() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Pong)
	return ok
}

func (x *SessionResponse) HasFailure() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Failure_)
	return ok
}

func (x *SessionResponse) HasSessionStarted() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_SessionStarted_)
	return ok
}

func (x *SessionResponse) HasSessionStopped() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_SessionStopped_)
	return ok
}

func (x *SessionResponse) HasUnsupported_6() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Unsupported_6)
	return ok
}

func (x *SessionResponse) HasUnsupported_7() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Unsupported_7)
	return ok
}

func (x *SessionResponse) HasAcquireSemaphorePending() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_AcquireSemaphorePending_)
	return ok
}

func (x *SessionResponse) HasAcquireSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_AcquireSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasReleaseSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_ReleaseSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasDescribeSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_DescribeSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasDescribeSemaphoreChanged() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_DescribeSemaphoreChanged_)
	return ok
}

func (x *SessionResponse) HasCreateSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_CreateSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasUpdateSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_UpdateSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasDeleteSemaphoreResult() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_DeleteSemaphoreResult_)
	return ok
}

func (x *SessionResponse) HasUnsupported_16() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Unsupported_16)
	return ok
}

func (x *SessionResponse) HasUnsupported_17() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Unsupported_17)
	return ok
}

func (x *SessionResponse) HasUnsupported_18() bool {
	if x == nil {
		return false
	}
	_, ok := x.Response.(*SessionResponse_Unsupported_18)
	return ok
}

func (x *SessionResponse) ClearResponse() {
	x.Response = nil
}

func (x *SessionResponse) ClearPing() {
	if _, ok := x.Response.(*SessionResponse_Ping); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearPong() {
	if _, ok := x.Response.(*SessionResponse_Pong); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearFailure() {
	if _, ok := x.Response.(*SessionResponse_Failure_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearSessionStarted() {
	if _, ok := x.Response.(*SessionResponse_SessionStarted_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearSessionStopped() {
	if _, ok := x.Response.(*SessionResponse_SessionStopped_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUnsupported_6() {
	if _, ok := x.Response.(*SessionResponse_Unsupported_6); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUnsupported_7() {
	if _, ok := x.Response.(*SessionResponse_Unsupported_7); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearAcquireSemaphorePending() {
	if _, ok := x.Response.(*SessionResponse_AcquireSemaphorePending_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearAcquireSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_AcquireSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearReleaseSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_ReleaseSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearDescribeSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_DescribeSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearDescribeSemaphoreChanged() {
	if _, ok := x.Response.(*SessionResponse_DescribeSemaphoreChanged_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearCreateSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_CreateSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUpdateSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_UpdateSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearDeleteSemaphoreResult() {
	if _, ok := x.Response.(*SessionResponse_DeleteSemaphoreResult_); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUnsupported_16() {
	if _, ok := x.Response.(*SessionResponse_Unsupported_16); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUnsupported_17() {
	if _, ok := x.Response.(*SessionResponse_Unsupported_17); ok {
		x.Response = nil
	}
}

func (x *SessionResponse) ClearUnsupported_18() {
	if _, ok := x.Response.(*SessionResponse_Unsupported_18); ok {
		x.Response = nil
	}
}

const SessionResponse_Response_not_set_case case_SessionResponse_Response = 0
const SessionResponse_Ping_case case_SessionResponse_Response = 1
const SessionResponse_Pong_case case_SessionResponse_Response = 2
const SessionResponse_Failure_case case_SessionResponse_Response = 3
const SessionResponse_SessionStarted_case case_SessionResponse_Response = 4
const SessionResponse_SessionStopped_case case_SessionResponse_Response = 5
const SessionResponse_Unsupported_6_case case_SessionResponse_Response = 6
const SessionResponse_Unsupported_7_case case_SessionResponse_Response = 7
const SessionResponse_AcquireSemaphorePending_case case_SessionResponse_Response = 8
const SessionResponse_AcquireSemaphoreResult_case case_SessionResponse_Response = 9
const SessionResponse_ReleaseSemaphoreResult_case case_SessionResponse_Response = 10
const SessionResponse_DescribeSemaphoreResult_case case_SessionResponse_Response = 11
const SessionResponse_DescribeSemaphoreChanged_case case_SessionResponse_Response = 12
const SessionResponse_CreateSemaphoreResult_case case_SessionResponse_Response = 13
const SessionResponse_UpdateSemaphoreResult_case case_SessionResponse_Response = 14
const SessionResponse_DeleteSemaphoreResult_case case_SessionResponse_Response = 15
const SessionResponse_Unsupported_16_case case_SessionResponse_Response = 16
const SessionResponse_Unsupported_17_case case_SessionResponse_Response = 17
const SessionResponse_Unsupported_18_case case_SessionResponse_Response = 18

func (x *SessionResponse) WhichResponse() case_SessionResponse_Response {
	if x == nil {
		return SessionResponse_Response_not_set_case
	}
	switch x.Response.(type) {
	case *SessionResponse_Ping:
		return SessionResponse_Ping_case
	case *SessionResponse_Pong:
		return SessionResponse_Pong_case
	case *SessionResponse_Failure_:
		return SessionResponse_Failure_case
	case *SessionResponse_SessionStarted_:
		return SessionResponse_SessionStarted_case
	case *SessionResponse_SessionStopped_:
		return SessionResponse_SessionStopped_case
	case *SessionResponse_Unsupported_6:
		return SessionResponse_Unsupported_6_case
	case *SessionResponse_Unsupported_7:
		return SessionResponse_Unsupported_7_case
	case *SessionResponse_AcquireSemaphorePending_:
		return SessionResponse_AcquireSemaphorePending_case
	case *SessionResponse_AcquireSemaphoreResult_:
		return SessionResponse_AcquireSemaphoreResult_case
	case *SessionResponse_ReleaseSemaphoreResult_:
		return SessionResponse_ReleaseSemaphoreResult_case
	case *SessionResponse_DescribeSemaphoreResult_:
		return SessionResponse_DescribeSemaphoreResult_case
	case *SessionResponse_DescribeSemaphoreChanged_:
		return SessionResponse_DescribeSemaphoreChanged_case
	case *SessionResponse_CreateSemaphoreResult_:
		return SessionResponse_CreateSemaphoreResult_case
	case *SessionResponse_UpdateSemaphoreResult_:
		return SessionResponse_UpdateSemaphoreResult_case
	case *SessionResponse_DeleteSemaphoreResult_:
		return SessionResponse_DeleteSemaphoreResult_case
	case *SessionResponse_Unsupported_16:
		return SessionResponse_Unsupported_16_case
	case *SessionResponse_Unsupported_17:
		return SessionResponse_Unsupported_17_case
	case *SessionResponse_Unsupported_18:
		return SessionResponse_Unsupported_18_case
	default:
		return SessionResponse_Response_not_set_case
	}
}

type SessionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Response:
	Ping                     *SessionResponse_PingPong
	Pong                     *SessionResponse_PingPong
	Failure                  *SessionResponse_Failure
	SessionStarted           *SessionResponse_SessionStarted
	SessionStopped           *SessionResponse_SessionStopped
	Unsupported_6            *Unsupported
	Unsupported_7            *Unsupported
	AcquireSemaphorePending  *SessionResponse_AcquireSemaphorePending
	AcquireSemaphoreResult   *SessionResponse_AcquireSemaphoreResult
	ReleaseSemaphoreResult   *SessionResponse_ReleaseSemaphoreResult
	DescribeSemaphoreResult  *SessionResponse_DescribeSemaphoreResult
	DescribeSemaphoreChanged *SessionResponse_DescribeSemaphoreChanged
	CreateSemaphoreResult    *SessionResponse_CreateSemaphoreResult
	UpdateSemaphoreResult    *SessionResponse_UpdateSemaphoreResult
	DeleteSemaphoreResult    *SessionResponse_DeleteSemaphoreResult
	Unsupported_16           *Unsupported
	Unsupported_17           *Unsupported
	Unsupported_18           *Unsupported
	// -- end of Response
}

func (b0 SessionResponse_builder) Build() *SessionResponse {
	m0 := &SessionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Ping != nil {
		x.Response = &SessionResponse_Ping{b.Ping}
	}
	if b.Pong != nil {
		x.Response = &SessionResponse_Pong{b.Pong}
	}
	if b.Failure != nil {
		x.Response = &SessionResponse_Failure_{b.Failure}
	}
	if b.SessionStarted != nil {
		x.Response = &SessionResponse_SessionStarted_{b.SessionStarted}
	}
	if b.SessionStopped != nil {
		x.Response = &SessionResponse_SessionStopped_{b.SessionStopped}
	}
	if b.Unsupported_6 != nil {
		x.Response = &SessionResponse_Unsupported_6{b.Unsupported_6}
	}
	if b.Unsupported_7 != nil {
		x.Response = &SessionResponse_Unsupported_7{b.Unsupported_7}
	}
	if b.AcquireSemaphorePending != nil {
		x.Response = &SessionResponse_AcquireSemaphorePending_{b.AcquireSemaphorePending}
	}
	if b.AcquireSemaphoreResult != nil {
		x.Response = &SessionResponse_AcquireSemaphoreResult_{b.AcquireSemaphoreResult}
	}
	if b.ReleaseSemaphoreResult != nil {
		x.Response = &SessionResponse_ReleaseSemaphoreResult_{b.ReleaseSemaphoreResult}
	}
	if b.DescribeSemaphoreResult != nil {
		x.Response = &SessionResponse_DescribeSemaphoreResult_{b.DescribeSemaphoreResult}
	}
	if b.DescribeSemaphoreChanged != nil {
		x.Response = &SessionResponse_DescribeSemaphoreChanged_{b.DescribeSemaphoreChanged}
	}
	if b.CreateSemaphoreResult != nil {
		x.Response = &SessionResponse_CreateSemaphoreResult_{b.CreateSemaphoreResult}
	}
	if b.UpdateSemaphoreResult != nil {
		x.Response = &SessionResponse_UpdateSemaphoreResult_{b.UpdateSemaphoreResult}
	}
	if b.DeleteSemaphoreResult != nil {
		x.Response = &SessionResponse_DeleteSemaphoreResult_{b.DeleteSemaphoreResult}
	}
	if b.Unsupported_16 != nil {
		x.Response = &SessionResponse_Unsupported_16{b.Unsupported_16}
	}
	if b.Unsupported_17 != nil {
		x.Response = &SessionResponse_Unsupported_17{b.Unsupported_17}
	}
	if b.Unsupported_18 != nil {
		x.Response = &SessionResponse_Unsupported_18{b.Unsupported_18}
	}
	return m0
}

type case_SessionResponse_Response protoreflect.FieldNumber

func (x case_SessionResponse_Response) String() string {
	md := file_protos_ydb_coordination_proto_msgTypes[6].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSessionResponse_Response interface {
	isSessionResponse_Response()
}

type SessionResponse_Ping struct {
	Ping *SessionResponse_PingPong `protobuf:"bytes,1,opt,name=ping,oneof"`
}

type SessionResponse_Pong struct {
	Pong *SessionResponse_PingPong `protobuf:"bytes,2,opt,name=pong,oneof"`
}

type SessionResponse_Failure_ struct {
	Failure *SessionResponse_Failure `protobuf:"bytes,3,opt,name=failure,oneof"`
}

type SessionResponse_SessionStarted_ struct {
	SessionStarted *SessionResponse_SessionStarted `protobuf:"bytes,4,opt,name=session_started,json=sessionStarted,oneof"`
}

type SessionResponse_SessionStopped_ struct {
	SessionStopped *SessionResponse_SessionStopped `protobuf:"bytes,5,opt,name=session_stopped,json=sessionStopped,oneof"`
}

type SessionResponse_Unsupported_6 struct {
	Unsupported_6 *Unsupported `protobuf:"bytes,6,opt,name=unsupported_6,json=unsupported6,oneof"`
}

type SessionResponse_Unsupported_7 struct {
	Unsupported_7 *Unsupported `protobuf:"bytes,7,opt,name=unsupported_7,json=unsupported7,oneof"`
}

type SessionResponse_AcquireSemaphorePending_ struct {
	AcquireSemaphorePending *SessionResponse_AcquireSemaphorePending `protobuf:"bytes,8,opt,name=acquire_semaphore_pending,json=acquireSemaphorePending,oneof"`
}

type SessionResponse_AcquireSemaphoreResult_ struct {
	AcquireSemaphoreResult *SessionResponse_AcquireSemaphoreResult `protobuf:"bytes,9,opt,name=acquire_semaphore_result,json=acquireSemaphoreResult,oneof"`
}

type SessionResponse_ReleaseSemaphoreResult_ struct {
	ReleaseSemaphoreResult *SessionResponse_ReleaseSemaphoreResult `protobuf:"bytes,10,opt,name=release_semaphore_result,json=releaseSemaphoreResult,oneof"`
}

type SessionResponse_DescribeSemaphoreResult_ struct {
	DescribeSemaphoreResult *SessionResponse_DescribeSemaphoreResult `protobuf:"bytes,11,opt,name=describe_semaphore_result,json=describeSemaphoreResult,oneof"`
}

type SessionResponse_DescribeSemaphoreChanged_ struct {
	DescribeSemaphoreChanged *SessionResponse_DescribeSemaphoreChanged `protobuf:"bytes,12,opt,name=describe_semaphore_changed,json=describeSemaphoreChanged,oneof"`
}

type SessionResponse_CreateSemaphoreResult_ struct {
	CreateSemaphoreResult *SessionResponse_CreateSemaphoreResult `protobuf:"bytes,13,opt,name=create_semaphore_result,json=createSemaphoreResult,oneof"`
}

type SessionResponse_UpdateSemaphoreResult_ struct {
	UpdateSemaphoreResult *SessionResponse_UpdateSemaphoreResult `protobuf:"bytes,14,opt,name=update_semaphore_result,json=updateSemaphoreResult,oneof"`
}

type SessionResponse_DeleteSemaphoreResult_ struct {
	DeleteSemaphoreResult *SessionResponse_DeleteSemaphoreResult `protobuf:"bytes,15,opt,name=delete_semaphore_result,json=deleteSemaphoreResult,oneof"`
}

type SessionResponse_Unsupported_16 struct {
	Unsupported_16 *Unsupported `protobuf:"bytes,16,opt,name=unsupported_16,json=unsupported16,oneof"`
}

type SessionResponse_Unsupported_17 struct {
	Unsupported_17 *Unsupported `protobuf:"bytes,17,opt,name=unsupported_17,json=unsupported17,oneof"`
}

type SessionResponse_Unsupported_18 struct {
	Unsupported_18 *Unsupported `protobuf:"bytes,18,opt,name=unsupported_18,json=unsupported18,oneof"`
}

func (*SessionResponse_Ping) isSessionResponse_Response() {}

func (*SessionResponse_Pong) isSessionResponse_Response() {}

func (*SessionResponse_Failure_) isSessionResponse_Response() {}

func (*SessionResponse_SessionStarted_) isSessionResponse_Response() {}

func (*SessionResponse_SessionStopped_) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_6) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_7) isSessionResponse_Response() {}

func (*SessionResponse_AcquireSemaphorePending_) isSessionResponse_Response() {}

func (*SessionResponse_AcquireSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_ReleaseSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DescribeSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DescribeSemaphoreChanged_) isSessionResponse_Response() {}

func (*SessionResponse_CreateSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_UpdateSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DeleteSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_16) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_17) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_18) isSessionResponse_Response() {}

type CreateNodeRequest struct {
	state           protoimpl.MessageState          `protogen:"hybrid.v1"`
	Path            *string                         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Config          *Config                         `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams" json:"operation_params,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateNodeRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CreateNodeRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CreateNodeRequest) SetPath(v string) {
	x.Path = &v
}

func (x *CreateNodeRequest) SetConfig(v *Config) {
	x.Config = v
}

func (x *CreateNodeRequest) SetOperationParams(v *Ydb_Operations.OperationParams) {
	x.OperationParams = v
}

func (x *CreateNodeRequest) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *CreateNodeRequest) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *CreateNodeRequest) HasOperationParams() bool {
	if x == nil {
		return false
	}
	return x.OperationParams != nil
}

func (x *CreateNodeRequest) ClearPath() {
	x.Path = nil
}

func (x *CreateNodeRequest) ClearConfig() {
	x.Config = nil
}

func (x *CreateNodeRequest) ClearOperationParams() {
	x.OperationParams = nil
}

type CreateNodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path            *string
	Config          *Config
	OperationParams *Ydb_Operations.OperationParams
}

func (b0 CreateNodeRequest_builder) Build() *CreateNodeRequest {
	m0 := &CreateNodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.Config = b.Config
	x.OperationParams = b.OperationParams
	return m0
}

type CreateNodeResponse struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	Operation     *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNodeResponse) Reset() {
	*x = CreateNodeResponse{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeResponse) ProtoMessage() {}

func (x *CreateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateNodeResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *CreateNodeResponse) SetOperation(v *Ydb_Operations.Operation) {
	x.Operation = v
}

func (x *CreateNodeResponse) HasOperation() bool {
	if x == nil {
		return false
	}
	return x.Operation != nil
}

func (x *CreateNodeResponse) ClearOperation() {
	x.Operation = nil
}

type CreateNodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Operation *Ydb_Operations.Operation
}

func (b0 CreateNodeResponse_builder) Build() *CreateNodeResponse {
	m0 := &CreateNodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Operation = b.Operation
	return m0
}

type AlterNodeRequest struct {
	state           protoimpl.MessageState          `protogen:"hybrid.v1"`
	Path            *string                         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Config          *Config                         `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams" json:"operation_params,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AlterNodeRequest) Reset() {
	*x = AlterNodeRequest{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNodeRequest) ProtoMessage() {}

func (x *AlterNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AlterNodeRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *AlterNodeRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AlterNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AlterNodeRequest) SetPath(v string) {
	x.Path = &v
}

func (x *AlterNodeRequest) SetConfig(v *Config) {
	x.Config = v
}

func (x *AlterNodeRequest) SetOperationParams(v *Ydb_Operations.OperationParams) {
	x.OperationParams = v
}

func (x *AlterNodeRequest) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *AlterNodeRequest) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *AlterNodeRequest) HasOperationParams() bool {
	if x == nil {
		return false
	}
	return x.OperationParams != nil
}

func (x *AlterNodeRequest) ClearPath() {
	x.Path = nil
}

func (x *AlterNodeRequest) ClearConfig() {
	x.Config = nil
}

func (x *AlterNodeRequest) ClearOperationParams() {
	x.OperationParams = nil
}

type AlterNodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path            *string
	Config          *Config
	OperationParams *Ydb_Operations.OperationParams
}

func (b0 AlterNodeRequest_builder) Build() *AlterNodeRequest {
	m0 := &AlterNodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.Config = b.Config
	x.OperationParams = b.OperationParams
	return m0
}

type AlterNodeResponse struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	Operation     *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterNodeResponse) Reset() {
	*x = AlterNodeResponse{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNodeResponse) ProtoMessage() {}

func (x *AlterNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AlterNodeResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *AlterNodeResponse) SetOperation(v *Ydb_Operations.Operation) {
	x.Operation = v
}

func (x *AlterNodeResponse) HasOperation() bool {
	if x == nil {
		return false
	}
	return x.Operation != nil
}

func (x *AlterNodeResponse) ClearOperation() {
	x.Operation = nil
}

type AlterNodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Operation *Ydb_Operations.Operation
}

func (b0 AlterNodeResponse_builder) Build() *AlterNodeResponse {
	m0 := &AlterNodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Operation = b.Operation
	return m0
}

type DropNodeRequest struct {
	state           protoimpl.MessageState          `protogen:"hybrid.v1"`
	Path            *string                         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams" json:"operation_params,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DropNodeRequest) Reset() {
	*x = DropNodeRequest{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropNodeRequest) ProtoMessage() {}

func (x *DropNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DropNodeRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DropNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DropNodeRequest) SetPath(v string) {
	x.Path = &v
}

func (x *DropNodeRequest) SetOperationParams(v *Ydb_Operations.OperationParams) {
	x.OperationParams = v
}

func (x *DropNodeRequest) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *DropNodeRequest) HasOperationParams() bool {
	if x == nil {
		return false
	}
	return x.OperationParams != nil
}

func (x *DropNodeRequest) ClearPath() {
	x.Path = nil
}

func (x *DropNodeRequest) ClearOperationParams() {
	x.OperationParams = nil
}

type DropNodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path            *string
	OperationParams *Ydb_Operations.OperationParams
}

func (b0 DropNodeRequest_builder) Build() *DropNodeRequest {
	m0 := &DropNodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.OperationParams = b.OperationParams
	return m0
}

type DropNodeResponse struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	Operation     *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropNodeResponse) Reset() {
	*x = DropNodeResponse{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropNodeResponse) ProtoMessage() {}

func (x *DropNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DropNodeResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DropNodeResponse) SetOperation(v *Ydb_Operations.Operation) {
	x.Operation = v
}

func (x *DropNodeResponse) HasOperation() bool {
	if x == nil {
		return false
	}
	return x.Operation != nil
}

func (x *DropNodeResponse) ClearOperation() {
	x.Operation = nil
}

type DropNodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Operation *Ydb_Operations.Operation
}

func (b0 DropNodeResponse_builder) Build() *DropNodeResponse {
	m0 := &DropNodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Operation = b.Operation
	return m0
}

type DescribeNodeRequest struct {
	state           protoimpl.MessageState          `protogen:"hybrid.v1"`
	Path            *string                         `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams" json:"operation_params,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DescribeNodeRequest) Reset() {
	*x = DescribeNodeRequest{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeRequest) ProtoMessage() {}

func (x *DescribeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DescribeNodeRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DescribeNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DescribeNodeRequest) SetPath(v string) {
	x.Path = &v
}

func (x *DescribeNodeRequest) SetOperationParams(v *Ydb_Operations.OperationParams) {
	x.OperationParams = v
}

func (x *DescribeNodeRequest) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *DescribeNodeRequest) HasOperationParams() bool {
	if x == nil {
		return false
	}
	return x.OperationParams != nil
}

func (x *DescribeNodeRequest) ClearPath() {
	x.Path = nil
}

func (x *DescribeNodeRequest) ClearOperationParams() {
	x.OperationParams = nil
}

type DescribeNodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path            *string
	OperationParams *Ydb_Operations.OperationParams
}

func (b0 DescribeNodeRequest_builder) Build() *DescribeNodeRequest {
	m0 := &DescribeNodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.OperationParams = b.OperationParams
	return m0
}

type DescribeNodeResponse struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	Operation     *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeNodeResponse) Reset() {
	*x = DescribeNodeResponse{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeResponse) ProtoMessage() {}

func (x *DescribeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DescribeNodeResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *DescribeNodeResponse) SetOperation(v *Ydb_Operations.Operation) {
	x.Operation = v
}

func (x *DescribeNodeResponse) HasOperation() bool {
	if x == nil {
		return false
	}
	return x.Operation != nil
}

func (x *DescribeNodeResponse) ClearOperation() {
	x.Operation = nil
}

type DescribeNodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Operation *Ydb_Operations.Operation
}

func (b0 DescribeNodeResponse_builder) Build() *DescribeNodeResponse {
	m0 := &DescribeNodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Operation = b.Operation
	return m0
}

type DescribeNodeResult struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Self          *Ydb_Scheme.Entry      `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Config        *Config                `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeNodeResult) Reset() {
	*x = DescribeNodeResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeResult) ProtoMessage() {}

func (x *DescribeNodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DescribeNodeResult) GetSelf() *Ydb_Scheme.Entry {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *DescribeNodeResult) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DescribeNodeResult) SetSelf(v *Ydb_Scheme.Entry) {
	x.Self = v
}

func (x *DescribeNodeResult) SetConfig(v *Config) {
	x.Config = v
}

func (x *DescribeNodeResult) HasSelf() bool {
	if x == nil {
		return false
	}
	return x.Self != nil
}

func (x *DescribeNodeResult) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *DescribeNodeResult) ClearSelf() {
	x.Self = nil
}

func (x *DescribeNodeResult) ClearConfig() {
	x.Config = nil
}

type DescribeNodeResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Self   *Ydb_Scheme.Entry
	Config *Config
}

func (b0 DescribeNodeResult_builder) Build() *DescribeNodeResult {
	m0 := &DescribeNodeResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.Self = b.Self
	x.Config = b.Config
	return m0
}

// *
// Used for checking liveness of the connection
type SessionRequest_PingPong struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Opaque number specified in the ping message is echoed in the pong message
	Opaque        *uint64 `protobuf:"varint,1,opt,name=opaque" json:"opaque,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_PingPong) Reset() {
	*x = SessionRequest_PingPong{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_PingPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_PingPong) ProtoMessage() {}

func (x *SessionRequest_PingPong) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_PingPong) GetOpaque() uint64 {
	if x != nil && x.Opaque != nil {
		return *x.Opaque
	}
	return 0
}

func (x *SessionRequest_PingPong) SetOpaque(v uint64) {
	x.Opaque = &v
}

func (x *SessionRequest_PingPong) HasOpaque() bool {
	if x == nil {
		return false
	}
	return x.Opaque != nil
}

func (x *SessionRequest_PingPong) ClearOpaque() {
	x.Opaque = nil
}

type SessionRequest_PingPong_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Opaque number specified in the ping message is echoed in the pong message
	Opaque *uint64
}

func (b0 SessionRequest_PingPong_builder) Build() *SessionRequest_PingPong {
	m0 := &SessionRequest_PingPong{}
	b, x := &b0, m0
	_, _ = b, x
	x.Opaque = b.Opaque
	return m0
}

// *
// First message used to start/restore a session
type SessionRequest_SessionStart struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Path to a coordination node
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Non-zero when restoring a session, 0 when creating a new session
	SessionId *uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Timeout in milliseconds during which client may restore a detached session
	TimeoutMillis *uint64 `protobuf:"varint,3,opt,name=timeout_millis,json=timeoutMillis" json:"timeout_millis,omitempty"`
	// User-defined description that may be used to describe the client
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// Monotonically increasing sequence number generated by the client
	// When concurrent SessionStart requests are detected the one with
	// the biggest sequence number will succeed
	SeqNo *uint64 `protobuf:"varint,5,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	// Random bytes used to protect session from restore by other clients (max. 16 bytes)
	ProtectionKey []byte `protobuf:"bytes,6,opt,name=protection_key,json=protectionKey" json:"protection_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_SessionStart) Reset() {
	*x = SessionRequest_SessionStart{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_SessionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_SessionStart) ProtoMessage() {}

func (x *SessionRequest_SessionStart) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_SessionStart) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *SessionRequest_SessionStart) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *SessionRequest_SessionStart) GetTimeoutMillis() uint64 {
	if x != nil && x.TimeoutMillis != nil {
		return *x.TimeoutMillis
	}
	return 0
}

func (x *SessionRequest_SessionStart) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SessionRequest_SessionStart) GetSeqNo() uint64 {
	if x != nil && x.SeqNo != nil {
		return *x.SeqNo
	}
	return 0
}

func (x *SessionRequest_SessionStart) GetProtectionKey() []byte {
	if x != nil {
		return x.ProtectionKey
	}
	return nil
}

func (x *SessionRequest_SessionStart) SetPath(v string) {
	x.Path = &v
}

func (x *SessionRequest_SessionStart) SetSessionId(v uint64) {
	x.SessionId = &v
}

func (x *SessionRequest_SessionStart) SetTimeoutMillis(v uint64) {
	x.TimeoutMillis = &v
}

func (x *SessionRequest_SessionStart) SetDescription(v string) {
	x.Description = &v
}

func (x *SessionRequest_SessionStart) SetSeqNo(v uint64) {
	x.SeqNo = &v
}

func (x *SessionRequest_SessionStart) SetProtectionKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.ProtectionKey = v
}

func (x *SessionRequest_SessionStart) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *SessionRequest_SessionStart) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *SessionRequest_SessionStart) HasTimeoutMillis() bool {
	if x == nil {
		return false
	}
	return x.TimeoutMillis != nil
}

func (x *SessionRequest_SessionStart) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *SessionRequest_SessionStart) HasSeqNo() bool {
	if x == nil {
		return false
	}
	return x.SeqNo != nil
}

func (x *SessionRequest_SessionStart) HasProtectionKey() bool {
	if x == nil {
		return false
	}
	return x.ProtectionKey != nil
}

func (x *SessionRequest_SessionStart) ClearPath() {
	x.Path = nil
}

func (x *SessionRequest_SessionStart) ClearSessionId() {
	x.SessionId = nil
}

func (x *SessionRequest_SessionStart) ClearTimeoutMillis() {
	x.TimeoutMillis = nil
}

func (x *SessionRequest_SessionStart) ClearDescription() {
	x.Description = nil
}

func (x *SessionRequest_SessionStart) ClearSeqNo() {
	x.SeqNo = nil
}

func (x *SessionRequest_SessionStart) ClearProtectionKey() {
	x.ProtectionKey = nil
}

type SessionRequest_SessionStart_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Path to a coordination node
	Path *string
	// Non-zero when restoring a session, 0 when creating a new session
	SessionId *uint64
	// Timeout in milliseconds during which client may restore a detached session
	TimeoutMillis *uint64
	// User-defined description that may be used to describe the client
	Description *string
	// Monotonically increasing sequence number generated by the client
	// When concurrent SessionStart requests are detected the one with
	// the biggest sequence number will succeed
	SeqNo *uint64
	// Random bytes used to protect session from restore by other clients (max. 16 bytes)
	ProtectionKey []byte
}

func (b0 SessionRequest_SessionStart_builder) Build() *SessionRequest_SessionStart {
	m0 := &SessionRequest_SessionStart{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.SessionId = b.SessionId
	x.TimeoutMillis = b.TimeoutMillis
	x.Description = b.Description
	x.SeqNo = b.SeqNo
	x.ProtectionKey = b.ProtectionKey
	return m0
}

// *
// Last message used to cleanly stop session before its timeout expires
type SessionRequest_SessionStop struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_SessionStop) Reset() {
	*x = SessionRequest_SessionStop{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_SessionStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_SessionStop) ProtoMessage() {}

func (x *SessionRequest_SessionStop) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SessionRequest_SessionStop_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SessionRequest_SessionStop_builder) Build() *SessionRequest_SessionStop {
	m0 := &SessionRequest_SessionStop{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// *
// Used to acquire a semaphore
//
// WARNING: a single session cannot acquire the same semaphore multiple times
//
// Later requests override previous operations with the same semaphore,
// e.g. to reduce acquired count, change timeout or attached data.
type SessionRequest_AcquireSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to acquire
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Timeout in milliseconds after which operation will fail
	// if it's still waiting in the waiters queue
	TimeoutMillis *uint64 `protobuf:"varint,3,opt,name=timeout_millis,json=timeoutMillis" json:"timeout_millis,omitempty"`
	// Number of tokens to acquire on the semaphore
	Count *uint64 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	// User-defined binary data that may be attached to the operation
	Data []byte `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	// Ephemeral semaphores are created with the first acquire operation
	// and automatically deleted with the last release operation
	Ephemeral     *bool `protobuf:"varint,6,opt,name=ephemeral" json:"ephemeral,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_AcquireSemaphore) Reset() {
	*x = SessionRequest_AcquireSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_AcquireSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_AcquireSemaphore) ProtoMessage() {}

func (x *SessionRequest_AcquireSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_AcquireSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_AcquireSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_AcquireSemaphore) GetTimeoutMillis() uint64 {
	if x != nil && x.TimeoutMillis != nil {
		return *x.TimeoutMillis
	}
	return 0
}

func (x *SessionRequest_AcquireSemaphore) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SessionRequest_AcquireSemaphore) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SessionRequest_AcquireSemaphore) GetEphemeral() bool {
	if x != nil && x.Ephemeral != nil {
		return *x.Ephemeral
	}
	return false
}

func (x *SessionRequest_AcquireSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_AcquireSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_AcquireSemaphore) SetTimeoutMillis(v uint64) {
	x.TimeoutMillis = &v
}

func (x *SessionRequest_AcquireSemaphore) SetCount(v uint64) {
	x.Count = &v
}

func (x *SessionRequest_AcquireSemaphore) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Data = v
}

func (x *SessionRequest_AcquireSemaphore) SetEphemeral(v bool) {
	x.Ephemeral = &v
}

func (x *SessionRequest_AcquireSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_AcquireSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_AcquireSemaphore) HasTimeoutMillis() bool {
	if x == nil {
		return false
	}
	return x.TimeoutMillis != nil
}

func (x *SessionRequest_AcquireSemaphore) HasCount() bool {
	if x == nil {
		return false
	}
	return x.Count != nil
}

func (x *SessionRequest_AcquireSemaphore) HasData() bool {
	if x == nil {
		return false
	}
	return x.Data != nil
}

func (x *SessionRequest_AcquireSemaphore) HasEphemeral() bool {
	if x == nil {
		return false
	}
	return x.Ephemeral != nil
}

func (x *SessionRequest_AcquireSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_AcquireSemaphore) ClearName() {
	x.Name = nil
}

func (x *SessionRequest_AcquireSemaphore) ClearTimeoutMillis() {
	x.TimeoutMillis = nil
}

func (x *SessionRequest_AcquireSemaphore) ClearCount() {
	x.Count = nil
}

func (x *SessionRequest_AcquireSemaphore) ClearData() {
	x.Data = nil
}

func (x *SessionRequest_AcquireSemaphore) ClearEphemeral() {
	x.Ephemeral = nil
}

type SessionRequest_AcquireSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to acquire
	Name *string
	// Timeout in milliseconds after which operation will fail
	// if it's still waiting in the waiters queue
	TimeoutMillis *uint64
	// Number of tokens to acquire on the semaphore
	Count *uint64
	// User-defined binary data that may be attached to the operation
	Data []byte
	// Ephemeral semaphores are created with the first acquire operation
	// and automatically deleted with the last release operation
	Ephemeral *bool
}

func (b0 SessionRequest_AcquireSemaphore_builder) Build() *SessionRequest_AcquireSemaphore {
	m0 := &SessionRequest_AcquireSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	x.TimeoutMillis = b.TimeoutMillis
	x.Count = b.Count
	x.Data = b.Data
	x.Ephemeral = b.Ephemeral
	return m0
}

// *
// Used to release a semaphore
//
// WARNING: a single session cannot release the same semaphore multiple times
//
// The release operation will either remove current session from waiters
// queue or release an already owned semaphore.
type SessionRequest_ReleaseSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to release
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_ReleaseSemaphore) Reset() {
	*x = SessionRequest_ReleaseSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_ReleaseSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_ReleaseSemaphore) ProtoMessage() {}

func (x *SessionRequest_ReleaseSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_ReleaseSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_ReleaseSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_ReleaseSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_ReleaseSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_ReleaseSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_ReleaseSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_ReleaseSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_ReleaseSemaphore) ClearName() {
	x.Name = nil
}

type SessionRequest_ReleaseSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to release
	Name *string
}

func (b0 SessionRequest_ReleaseSemaphore_builder) Build() *SessionRequest_ReleaseSemaphore {
	m0 := &SessionRequest_ReleaseSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	return m0
}

// *
// Used to describe semaphores and watch them for changes
//
// WARNING: a describe operation will cancel previous watches on the same semaphore
type SessionRequest_DescribeSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to describe
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Response will include owners list if true
	IncludeOwners *bool `protobuf:"varint,3,opt,name=include_owners,json=includeOwners" json:"include_owners,omitempty"`
	// Response will include waiters list if true
	IncludeWaiters *bool `protobuf:"varint,4,opt,name=include_waiters,json=includeWaiters" json:"include_waiters,omitempty"`
	// Watch for changes in semaphore data
	WatchData *bool `protobuf:"varint,5,opt,name=watch_data,json=watchData" json:"watch_data,omitempty"`
	// Watch for changes in semaphore owners (including owners data)
	WatchOwners   *bool `protobuf:"varint,6,opt,name=watch_owners,json=watchOwners" json:"watch_owners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_DescribeSemaphore) Reset() {
	*x = SessionRequest_DescribeSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_DescribeSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_DescribeSemaphore) ProtoMessage() {}

func (x *SessionRequest_DescribeSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_DescribeSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_DescribeSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_DescribeSemaphore) GetIncludeOwners() bool {
	if x != nil && x.IncludeOwners != nil {
		return *x.IncludeOwners
	}
	return false
}

func (x *SessionRequest_DescribeSemaphore) GetIncludeWaiters() bool {
	if x != nil && x.IncludeWaiters != nil {
		return *x.IncludeWaiters
	}
	return false
}

func (x *SessionRequest_DescribeSemaphore) GetWatchData() bool {
	if x != nil && x.WatchData != nil {
		return *x.WatchData
	}
	return false
}

func (x *SessionRequest_DescribeSemaphore) GetWatchOwners() bool {
	if x != nil && x.WatchOwners != nil {
		return *x.WatchOwners
	}
	return false
}

func (x *SessionRequest_DescribeSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_DescribeSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_DescribeSemaphore) SetIncludeOwners(v bool) {
	x.IncludeOwners = &v
}

func (x *SessionRequest_DescribeSemaphore) SetIncludeWaiters(v bool) {
	x.IncludeWaiters = &v
}

func (x *SessionRequest_DescribeSemaphore) SetWatchData(v bool) {
	x.WatchData = &v
}

func (x *SessionRequest_DescribeSemaphore) SetWatchOwners(v bool) {
	x.WatchOwners = &v
}

func (x *SessionRequest_DescribeSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_DescribeSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_DescribeSemaphore) HasIncludeOwners() bool {
	if x == nil {
		return false
	}
	return x.IncludeOwners != nil
}

func (x *SessionRequest_DescribeSemaphore) HasIncludeWaiters() bool {
	if x == nil {
		return false
	}
	return x.IncludeWaiters != nil
}

func (x *SessionRequest_DescribeSemaphore) HasWatchData() bool {
	if x == nil {
		return false
	}
	return x.WatchData != nil
}

func (x *SessionRequest_DescribeSemaphore) HasWatchOwners() bool {
	if x == nil {
		return false
	}
	return x.WatchOwners != nil
}

func (x *SessionRequest_DescribeSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_DescribeSemaphore) ClearName() {
	x.Name = nil
}

func (x *SessionRequest_DescribeSemaphore) ClearIncludeOwners() {
	x.IncludeOwners = nil
}

func (x *SessionRequest_DescribeSemaphore) ClearIncludeWaiters() {
	x.IncludeWaiters = nil
}

func (x *SessionRequest_DescribeSemaphore) ClearWatchData() {
	x.WatchData = nil
}

func (x *SessionRequest_DescribeSemaphore) ClearWatchOwners() {
	x.WatchOwners = nil
}

type SessionRequest_DescribeSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to describe
	Name *string
	// Response will include owners list if true
	IncludeOwners *bool
	// Response will include waiters list if true
	IncludeWaiters *bool
	// Watch for changes in semaphore data
	WatchData *bool
	// Watch for changes in semaphore owners (including owners data)
	WatchOwners *bool
}

func (b0 SessionRequest_DescribeSemaphore_builder) Build() *SessionRequest_DescribeSemaphore {
	m0 := &SessionRequest_DescribeSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	x.IncludeOwners = b.IncludeOwners
	x.IncludeWaiters = b.IncludeWaiters
	x.WatchData = b.WatchData
	x.WatchOwners = b.WatchOwners
	return m0
}

// *
// Used to create a new semaphore
type SessionRequest_CreateSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to create
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Number of tokens that may be acquired by sessions
	Limit *uint64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// User-defined data that is attached to the semaphore
	Data          []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_CreateSemaphore) Reset() {
	*x = SessionRequest_CreateSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_CreateSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_CreateSemaphore) ProtoMessage() {}

func (x *SessionRequest_CreateSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_CreateSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_CreateSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_CreateSemaphore) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SessionRequest_CreateSemaphore) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SessionRequest_CreateSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_CreateSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_CreateSemaphore) SetLimit(v uint64) {
	x.Limit = &v
}

func (x *SessionRequest_CreateSemaphore) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Data = v
}

func (x *SessionRequest_CreateSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_CreateSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_CreateSemaphore) HasLimit() bool {
	if x == nil {
		return false
	}
	return x.Limit != nil
}

func (x *SessionRequest_CreateSemaphore) HasData() bool {
	if x == nil {
		return false
	}
	return x.Data != nil
}

func (x *SessionRequest_CreateSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_CreateSemaphore) ClearName() {
	x.Name = nil
}

func (x *SessionRequest_CreateSemaphore) ClearLimit() {
	x.Limit = nil
}

func (x *SessionRequest_CreateSemaphore) ClearData() {
	x.Data = nil
}

type SessionRequest_CreateSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to create
	Name *string
	// Number of tokens that may be acquired by sessions
	Limit *uint64
	// User-defined data that is attached to the semaphore
	Data []byte
}

func (b0 SessionRequest_CreateSemaphore_builder) Build() *SessionRequest_CreateSemaphore {
	m0 := &SessionRequest_CreateSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	x.Limit = b.Limit
	x.Data = b.Data
	return m0
}

// *
// Used to change semaphore data
type SessionRequest_UpdateSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to update
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// User-defined data that is attached to the semaphore
	Data          []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_UpdateSemaphore) Reset() {
	*x = SessionRequest_UpdateSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_UpdateSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_UpdateSemaphore) ProtoMessage() {}

func (x *SessionRequest_UpdateSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_UpdateSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_UpdateSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_UpdateSemaphore) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SessionRequest_UpdateSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_UpdateSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_UpdateSemaphore) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Data = v
}

func (x *SessionRequest_UpdateSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_UpdateSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_UpdateSemaphore) HasData() bool {
	if x == nil {
		return false
	}
	return x.Data != nil
}

func (x *SessionRequest_UpdateSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_UpdateSemaphore) ClearName() {
	x.Name = nil
}

func (x *SessionRequest_UpdateSemaphore) ClearData() {
	x.Data = nil
}

type SessionRequest_UpdateSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to update
	Name *string
	// User-defined data that is attached to the semaphore
	Data []byte
}

func (b0 SessionRequest_UpdateSemaphore_builder) Build() *SessionRequest_UpdateSemaphore {
	m0 := &SessionRequest_UpdateSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	x.Data = b.Data
	return m0
}

// *
// Used to delete an existing semaphore
type SessionRequest_DeleteSemaphore struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client-defined request id, echoed in the response
	ReqId *uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	// Name of the semaphore to delete
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Will delete semaphore even if currently acquired by sessions
	Force         *bool `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionRequest_DeleteSemaphore) Reset() {
	*x = SessionRequest_DeleteSemaphore{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionRequest_DeleteSemaphore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_DeleteSemaphore) ProtoMessage() {}

func (x *SessionRequest_DeleteSemaphore) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionRequest_DeleteSemaphore) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionRequest_DeleteSemaphore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionRequest_DeleteSemaphore) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

func (x *SessionRequest_DeleteSemaphore) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionRequest_DeleteSemaphore) SetName(v string) {
	x.Name = &v
}

func (x *SessionRequest_DeleteSemaphore) SetForce(v bool) {
	x.Force = &v
}

func (x *SessionRequest_DeleteSemaphore) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionRequest_DeleteSemaphore) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SessionRequest_DeleteSemaphore) HasForce() bool {
	if x == nil {
		return false
	}
	return x.Force != nil
}

func (x *SessionRequest_DeleteSemaphore) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionRequest_DeleteSemaphore) ClearName() {
	x.Name = nil
}

func (x *SessionRequest_DeleteSemaphore) ClearForce() {
	x.Force = nil
}

type SessionRequest_DeleteSemaphore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client-defined request id, echoed in the response
	ReqId *uint64
	// Name of the semaphore to delete
	Name *string
	// Will delete semaphore even if currently acquired by sessions
	Force *bool
}

func (b0 SessionRequest_DeleteSemaphore_builder) Build() *SessionRequest_DeleteSemaphore {
	m0 := &SessionRequest_DeleteSemaphore{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Name = b.Name
	x.Force = b.Force
	return m0
}

// *
// Used for checking liveness of the connection
type SessionResponse_PingPong struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Opaque number specified in the ping message is echoed in the pong message
	Opaque        *uint64 `protobuf:"varint,1,opt,name=opaque" json:"opaque,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_PingPong) Reset() {
	*x = SessionResponse_PingPong{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_PingPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_PingPong) ProtoMessage() {}

func (x *SessionResponse_PingPong) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_PingPong) GetOpaque() uint64 {
	if x != nil && x.Opaque != nil {
		return *x.Opaque
	}
	return 0
}

func (x *SessionResponse_PingPong) SetOpaque(v uint64) {
	x.Opaque = &v
}

func (x *SessionResponse_PingPong) HasOpaque() bool {
	if x == nil {
		return false
	}
	return x.Opaque != nil
}

func (x *SessionResponse_PingPong) ClearOpaque() {
	x.Opaque = nil
}

type SessionResponse_PingPong_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Opaque number specified in the ping message is echoed in the pong message
	Opaque *uint64
}

func (b0 SessionResponse_PingPong_builder) Build() *SessionResponse_PingPong {
	m0 := &SessionResponse_PingPong{}
	b, x := &b0, m0
	_, _ = b, x
	x.Opaque = b.Opaque
	return m0
}

// *
// Used to report connection and session level failures
type SessionResponse_Failure struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	Status        *Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues        []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_Failure) Reset() {
	*x = SessionResponse_Failure{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_Failure) ProtoMessage() {}

func (x *SessionResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_Failure) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_Failure) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_Failure) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_Failure) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_Failure) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_Failure) ClearStatus() {
	x.Status = nil
}

type SessionResponse_Failure_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
}

func (b0 SessionResponse_Failure_builder) Build() *SessionResponse_Failure {
	m0 := &SessionResponse_Failure{}
	b, x := &b0, m0
	_, _ = b, x
	x.Status = b.Status
	x.Issues = b.Issues
	return m0
}

// *
// Used to report a successful session create/restore operation
type SessionResponse_SessionStarted struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A server generation id that may be used for restoring the session
	SessionId *uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Timeout in milliseconds that will be used by the server
	TimeoutMillis *uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis" json:"timeout_millis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_SessionStarted) Reset() {
	*x = SessionResponse_SessionStarted{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_SessionStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_SessionStarted) ProtoMessage() {}

func (x *SessionResponse_SessionStarted) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_SessionStarted) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *SessionResponse_SessionStarted) GetTimeoutMillis() uint64 {
	if x != nil && x.TimeoutMillis != nil {
		return *x.TimeoutMillis
	}
	return 0
}

func (x *SessionResponse_SessionStarted) SetSessionId(v uint64) {
	x.SessionId = &v
}

func (x *SessionResponse_SessionStarted) SetTimeoutMillis(v uint64) {
	x.TimeoutMillis = &v
}

func (x *SessionResponse_SessionStarted) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *SessionResponse_SessionStarted) HasTimeoutMillis() bool {
	if x == nil {
		return false
	}
	return x.TimeoutMillis != nil
}

func (x *SessionResponse_SessionStarted) ClearSessionId() {
	x.SessionId = nil
}

func (x *SessionResponse_SessionStarted) ClearTimeoutMillis() {
	x.TimeoutMillis = nil
}

type SessionResponse_SessionStarted_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A server generation id that may be used for restoring the session
	SessionId *uint64
	// Timeout in milliseconds that will be used by the server
	TimeoutMillis *uint64
}

func (b0 SessionResponse_SessionStarted_builder) Build() *SessionResponse_SessionStarted {
	m0 := &SessionResponse_SessionStarted{}
	b, x := &b0, m0
	_, _ = b, x
	x.SessionId = b.SessionId
	x.TimeoutMillis = b.TimeoutMillis
	return m0
}

// *
// Used to report a successful graceful termination of the session
type SessionResponse_SessionStopped struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	SessionId     *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_SessionStopped) Reset() {
	*x = SessionResponse_SessionStopped{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_SessionStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_SessionStopped) ProtoMessage() {}

func (x *SessionResponse_SessionStopped) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_SessionStopped) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *SessionResponse_SessionStopped) SetSessionId(v uint64) {
	x.SessionId = &v
}

func (x *SessionResponse_SessionStopped) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *SessionResponse_SessionStopped) ClearSessionId() {
	x.SessionId = nil
}

type SessionResponse_SessionStopped_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SessionId *uint64
}

func (b0 SessionResponse_SessionStopped_builder) Build() *SessionResponse_SessionStopped {
	m0 := &SessionResponse_SessionStopped{}
	b, x := &b0, m0
	_, _ = b, x
	x.SessionId = b.SessionId
	return m0
}

// *
// Used by the server to report when an acquire operation is added to the waiters queue
type SessionResponse_AcquireSemaphorePending struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	ReqId         *uint64                `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_AcquireSemaphorePending) Reset() {
	*x = SessionResponse_AcquireSemaphorePending{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_AcquireSemaphorePending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_AcquireSemaphorePending) ProtoMessage() {}

func (x *SessionResponse_AcquireSemaphorePending) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_AcquireSemaphorePending) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_AcquireSemaphorePending) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_AcquireSemaphorePending) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_AcquireSemaphorePending) ClearReqId() {
	x.ReqId = nil
}

type SessionResponse_AcquireSemaphorePending_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId *uint64
}

func (b0 SessionResponse_AcquireSemaphorePending_builder) Build() *SessionResponse_AcquireSemaphorePending {
	m0 := &SessionResponse_AcquireSemaphorePending{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	return m0
}

// *
// Used by the server to report the result of an acquire operation
type SessionResponse_AcquireSemaphoreResult struct {
	state  protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId  *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	// True if semaphore was acquired, false if acquire timed out
	Acquired      *bool `protobuf:"varint,4,opt,name=acquired" json:"acquired,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_AcquireSemaphoreResult) Reset() {
	*x = SessionResponse_AcquireSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_AcquireSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_AcquireSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_AcquireSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_AcquireSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_AcquireSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_AcquireSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_AcquireSemaphoreResult) GetAcquired() bool {
	if x != nil && x.Acquired != nil {
		return *x.Acquired
	}
	return false
}

func (x *SessionResponse_AcquireSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_AcquireSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_AcquireSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_AcquireSemaphoreResult) SetAcquired(v bool) {
	x.Acquired = &v
}

func (x *SessionResponse_AcquireSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_AcquireSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_AcquireSemaphoreResult) HasAcquired() bool {
	if x == nil {
		return false
	}
	return x.Acquired != nil
}

func (x *SessionResponse_AcquireSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_AcquireSemaphoreResult) ClearStatus() {
	x.Status = nil
}

func (x *SessionResponse_AcquireSemaphoreResult) ClearAcquired() {
	x.Acquired = nil
}

type SessionResponse_AcquireSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId  *uint64
	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
	// True if semaphore was acquired, false if acquire timed out
	Acquired *bool
}

func (b0 SessionResponse_AcquireSemaphoreResult_builder) Build() *SessionResponse_AcquireSemaphoreResult {
	m0 := &SessionResponse_AcquireSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	x.Acquired = b.Acquired
	return m0
}

// *
// Used by the server to report the result of a release operation
type SessionResponse_ReleaseSemaphoreResult struct {
	state  protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId  *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	// True if semaphore was released, false if there was no active acquire operation
	Released      *bool `protobuf:"varint,4,opt,name=released" json:"released,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_ReleaseSemaphoreResult) Reset() {
	*x = SessionResponse_ReleaseSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_ReleaseSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_ReleaseSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_ReleaseSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetReleased() bool {
	if x != nil && x.Released != nil {
		return *x.Released
	}
	return false
}

func (x *SessionResponse_ReleaseSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_ReleaseSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_ReleaseSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_ReleaseSemaphoreResult) SetReleased(v bool) {
	x.Released = &v
}

func (x *SessionResponse_ReleaseSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) HasReleased() bool {
	if x == nil {
		return false
	}
	return x.Released != nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) ClearStatus() {
	x.Status = nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) ClearReleased() {
	x.Released = nil
}

type SessionResponse_ReleaseSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId  *uint64
	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
	// True if semaphore was released, false if there was no active acquire operation
	Released *bool
}

func (b0 SessionResponse_ReleaseSemaphoreResult_builder) Build() *SessionResponse_ReleaseSemaphoreResult {
	m0 := &SessionResponse_ReleaseSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	x.Released = b.Released
	return m0
}

// *
// The result of the describe operation
type SessionResponse_DescribeSemaphoreResult struct {
	state                protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId                *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status               *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues               []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	SemaphoreDescription *SemaphoreDescription     `protobuf:"bytes,4,opt,name=semaphore_description,json=semaphoreDescription" json:"semaphore_description,omitempty"`
	// True if a watch has been added for the semaphore
	WatchAdded    *bool `protobuf:"varint,5,opt,name=watch_added,json=watchAdded" json:"watch_added,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_DescribeSemaphoreResult) Reset() {
	*x = SessionResponse_DescribeSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_DescribeSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DescribeSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_DescribeSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_DescribeSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_DescribeSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_DescribeSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_DescribeSemaphoreResult) GetSemaphoreDescription() *SemaphoreDescription {
	if x != nil {
		return x.SemaphoreDescription
	}
	return nil
}

func (x *SessionResponse_DescribeSemaphoreResult) GetWatchAdded() bool {
	if x != nil && x.WatchAdded != nil {
		return *x.WatchAdded
	}
	return false
}

func (x *SessionResponse_DescribeSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_DescribeSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_DescribeSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_DescribeSemaphoreResult) SetSemaphoreDescription(v *SemaphoreDescription) {
	x.SemaphoreDescription = v
}

func (x *SessionResponse_DescribeSemaphoreResult) SetWatchAdded(v bool) {
	x.WatchAdded = &v
}

func (x *SessionResponse_DescribeSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_DescribeSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_DescribeSemaphoreResult) HasSemaphoreDescription() bool {
	if x == nil {
		return false
	}
	return x.SemaphoreDescription != nil
}

func (x *SessionResponse_DescribeSemaphoreResult) HasWatchAdded() bool {
	if x == nil {
		return false
	}
	return x.WatchAdded != nil
}

func (x *SessionResponse_DescribeSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_DescribeSemaphoreResult) ClearStatus() {
	x.Status = nil
}

func (x *SessionResponse_DescribeSemaphoreResult) ClearSemaphoreDescription() {
	x.SemaphoreDescription = nil
}

func (x *SessionResponse_DescribeSemaphoreResult) ClearWatchAdded() {
	x.WatchAdded = nil
}

type SessionResponse_DescribeSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId                *uint64
	Status               *Ydb.StatusIds_StatusCode
	Issues               []*Ydb_Issue.IssueMessage
	SemaphoreDescription *SemaphoreDescription
	// True if a watch has been added for the semaphore
	WatchAdded *bool
}

func (b0 SessionResponse_DescribeSemaphoreResult_builder) Build() *SessionResponse_DescribeSemaphoreResult {
	m0 := &SessionResponse_DescribeSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	x.SemaphoreDescription = b.SemaphoreDescription
	x.WatchAdded = b.WatchAdded
	return m0
}

// *
// Used to report a change in the watched semaphore
type SessionResponse_DescribeSemaphoreChanged struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	ReqId         *uint64                `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	DataChanged   *bool                  `protobuf:"varint,2,opt,name=data_changed,json=dataChanged" json:"data_changed,omitempty"`
	OwnersChanged *bool                  `protobuf:"varint,3,opt,name=owners_changed,json=ownersChanged" json:"owners_changed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_DescribeSemaphoreChanged) Reset() {
	*x = SessionResponse_DescribeSemaphoreChanged{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_DescribeSemaphoreChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DescribeSemaphoreChanged) ProtoMessage() {}

func (x *SessionResponse_DescribeSemaphoreChanged) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetDataChanged() bool {
	if x != nil && x.DataChanged != nil {
		return *x.DataChanged
	}
	return false
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetOwnersChanged() bool {
	if x != nil && x.OwnersChanged != nil {
		return *x.OwnersChanged
	}
	return false
}

func (x *SessionResponse_DescribeSemaphoreChanged) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_DescribeSemaphoreChanged) SetDataChanged(v bool) {
	x.DataChanged = &v
}

func (x *SessionResponse_DescribeSemaphoreChanged) SetOwnersChanged(v bool) {
	x.OwnersChanged = &v
}

func (x *SessionResponse_DescribeSemaphoreChanged) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_DescribeSemaphoreChanged) HasDataChanged() bool {
	if x == nil {
		return false
	}
	return x.DataChanged != nil
}

func (x *SessionResponse_DescribeSemaphoreChanged) HasOwnersChanged() bool {
	if x == nil {
		return false
	}
	return x.OwnersChanged != nil
}

func (x *SessionResponse_DescribeSemaphoreChanged) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_DescribeSemaphoreChanged) ClearDataChanged() {
	x.DataChanged = nil
}

func (x *SessionResponse_DescribeSemaphoreChanged) ClearOwnersChanged() {
	x.OwnersChanged = nil
}

type SessionResponse_DescribeSemaphoreChanged_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId         *uint64
	DataChanged   *bool
	OwnersChanged *bool
}

func (b0 SessionResponse_DescribeSemaphoreChanged_builder) Build() *SessionResponse_DescribeSemaphoreChanged {
	m0 := &SessionResponse_DescribeSemaphoreChanged{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.DataChanged = b.DataChanged
	x.OwnersChanged = b.OwnersChanged
	return m0
}

// *
// The result of semaphore creation
type SessionResponse_CreateSemaphoreResult struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId         *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status        *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues        []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_CreateSemaphoreResult) Reset() {
	*x = SessionResponse_CreateSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_CreateSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_CreateSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_CreateSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_CreateSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_CreateSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_CreateSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_CreateSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_CreateSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_CreateSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_CreateSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_CreateSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_CreateSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_CreateSemaphoreResult) ClearStatus() {
	x.Status = nil
}

type SessionResponse_CreateSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId  *uint64
	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
}

func (b0 SessionResponse_CreateSemaphoreResult_builder) Build() *SessionResponse_CreateSemaphoreResult {
	m0 := &SessionResponse_CreateSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	return m0
}

// *
// The result of semaphore update
type SessionResponse_UpdateSemaphoreResult struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId         *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status        *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues        []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_UpdateSemaphoreResult) Reset() {
	*x = SessionResponse_UpdateSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_UpdateSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_UpdateSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_UpdateSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_UpdateSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_UpdateSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_UpdateSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_UpdateSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_UpdateSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_UpdateSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_UpdateSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_UpdateSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_UpdateSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_UpdateSemaphoreResult) ClearStatus() {
	x.Status = nil
}

type SessionResponse_UpdateSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId  *uint64
	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
}

func (b0 SessionResponse_UpdateSemaphoreResult_builder) Build() *SessionResponse_UpdateSemaphoreResult {
	m0 := &SessionResponse_UpdateSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	return m0
}

// *
// The result of semaphore deletion
type SessionResponse_DeleteSemaphoreResult struct {
	state         protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReqId         *uint64                   `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	Status        *Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues        []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionResponse_DeleteSemaphoreResult) Reset() {
	*x = SessionResponse_DeleteSemaphoreResult{}
	mi := &file_protos_ydb_coordination_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionResponse_DeleteSemaphoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DeleteSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_DeleteSemaphoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_coordination_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SessionResponse_DeleteSemaphoreResult) GetReqId() uint64 {
	if x != nil && x.ReqId != nil {
		return *x.ReqId
	}
	return 0
}

func (x *SessionResponse_DeleteSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_DeleteSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SessionResponse_DeleteSemaphoreResult) SetReqId(v uint64) {
	x.ReqId = &v
}

func (x *SessionResponse_DeleteSemaphoreResult) SetStatus(v Ydb.StatusIds_StatusCode) {
	x.Status = &v
}

func (x *SessionResponse_DeleteSemaphoreResult) SetIssues(v []*Ydb_Issue.IssueMessage) {
	x.Issues = v
}

func (x *SessionResponse_DeleteSemaphoreResult) HasReqId() bool {
	if x == nil {
		return false
	}
	return x.ReqId != nil
}

func (x *SessionResponse_DeleteSemaphoreResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SessionResponse_DeleteSemaphoreResult) ClearReqId() {
	x.ReqId = nil
}

func (x *SessionResponse_DeleteSemaphoreResult) ClearStatus() {
	x.Status = nil
}

type SessionResponse_DeleteSemaphoreResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReqId  *uint64
	Status *Ydb.StatusIds_StatusCode
	Issues []*Ydb_Issue.IssueMessage
}

func (b0 SessionResponse_DeleteSemaphoreResult_builder) Build() *SessionResponse_DeleteSemaphoreResult {
	m0 := &SessionResponse_DeleteSemaphoreResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReqId = b.ReqId
	x.Status = b.Status
	x.Issues = b.Issues
	return m0
}

var File_protos_ydb_coordination_proto protoreflect.FileDescriptor

const file_protos_ydb_coordination_proto_rawDesc = "" +
	"\n" +
	"\x1dprotos/ydb_coordination.proto\x12\x10Ydb.Coordination\x1a\x1aprotos/ydb_operation.proto\x1a\x1dprotos/ydb_status_codes.proto\x1a\x1eprotos/ydb_issue_message.proto\x1a\x17protos/ydb_scheme.proto\x1a!google/protobuf/go_features.proto\"\r\n" +
	"\vUnsupported\"\xae\x03\n" +
	"\x06Config\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x127\n" +
	"\x18self_check_period_millis\x18\x02 \x01(\rR\x15selfCheckPeriodMillis\x12=\n" +
	"\x1bsession_grace_period_millis\x18\x03 \x01(\rR\x18sessionGracePeriodMillis\x12U\n" +
	"\x15read_consistency_mode\x18\x04 \x01(\x0e2!.Ydb.Coordination.ConsistencyModeR\x13readConsistencyMode\x12Y\n" +
	"\x17attach_consistency_mode\x18\x05 \x01(\x0e2!.Ydb.Coordination.ConsistencyModeR\x15attachConsistencyMode\x12f\n" +
	"\x1arate_limiter_counters_mode\x18\x06 \x01(\x0e2).Ydb.Coordination.RateLimiterCountersModeR\x17rateLimiterCountersMode\"\x98\x01\n" +
	"\x12SessionDescription\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x04R\tsessionId\x12%\n" +
	"\x0etimeout_millis\x18\x02 \x01(\x04R\rtimeoutMillis\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\battached\x18\x04 \x01(\bR\battached\"\x9d\x01\n" +
	"\x10SemaphoreSession\x12\x19\n" +
	"\border_id\x18\x05 \x01(\x04R\aorderId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x04R\tsessionId\x12%\n" +
	"\x0etimeout_millis\x18\x02 \x01(\x04R\rtimeoutMillis\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x04R\x05count\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\"\x82\x02\n" +
	"\x14SemaphoreDescription\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x14\n" +
	"\x05count\x18\a \x01(\x04R\x05count\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x04R\x05limit\x12\x1c\n" +
	"\tephemeral\x18\x04 \x01(\bR\tephemeral\x12:\n" +
	"\x06owners\x18\x05 \x03(\v2\".Ydb.Coordination.SemaphoreSessionR\x06owners\x12<\n" +
	"\awaiters\x18\x06 \x03(\v2\".Ydb.Coordination.SemaphoreSessionR\awaiters\"\xbd\x11\n" +
	"\x0eSessionRequest\x12?\n" +
	"\x04ping\x18\x01 \x01(\v2).Ydb.Coordination.SessionRequest.PingPongH\x00R\x04ping\x12?\n" +
	"\x04pong\x18\x02 \x01(\v2).Ydb.Coordination.SessionRequest.PingPongH\x00R\x04pong\x12T\n" +
	"\rsession_start\x18\x03 \x01(\v2-.Ydb.Coordination.SessionRequest.SessionStartH\x00R\fsessionStart\x12Q\n" +
	"\fsession_stop\x18\x04 \x01(\v2,.Ydb.Coordination.SessionRequest.SessionStopH\x00R\vsessionStop\x12D\n" +
	"\runsupported_5\x18\x05 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\funsupported5\x12D\n" +
	"\runsupported_6\x18\x06 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\funsupported6\x12`\n" +
	"\x11acquire_semaphore\x18\a \x01(\v21.Ydb.Coordination.SessionRequest.AcquireSemaphoreH\x00R\x10acquireSemaphore\x12`\n" +
	"\x11release_semaphore\x18\b \x01(\v21.Ydb.Coordination.SessionRequest.ReleaseSemaphoreH\x00R\x10releaseSemaphore\x12c\n" +
	"\x12describe_semaphore\x18\t \x01(\v22.Ydb.Coordination.SessionRequest.DescribeSemaphoreH\x00R\x11describeSemaphore\x12]\n" +
	"\x10create_semaphore\x18\n" +
	" \x01(\v20.Ydb.Coordination.SessionRequest.CreateSemaphoreH\x00R\x0fcreateSemaphore\x12]\n" +
	"\x10update_semaphore\x18\v \x01(\v20.Ydb.Coordination.SessionRequest.UpdateSemaphoreH\x00R\x0fupdateSemaphore\x12]\n" +
	"\x10delete_semaphore\x18\f \x01(\v20.Ydb.Coordination.SessionRequest.DeleteSemaphoreH\x00R\x0fdeleteSemaphore\x12F\n" +
	"\x0eunsupported_13\x18\r \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported13\x12F\n" +
	"\x0eunsupported_14\x18\x0e \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported14\x12F\n" +
	"\x0eunsupported_15\x18\x0f \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported15\x1a\"\n" +
	"\bPingPong\x12\x16\n" +
	"\x06opaque\x18\x01 \x01(\x04R\x06opaque\x1a\xc8\x01\n" +
	"\fSessionStart\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\x04R\tsessionId\x12%\n" +
	"\x0etimeout_millis\x18\x03 \x01(\x04R\rtimeoutMillis\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x15\n" +
	"\x06seq_no\x18\x05 \x01(\x04R\x05seqNo\x12%\n" +
	"\x0eprotection_key\x18\x06 \x01(\fR\rprotectionKey\x1a\r\n" +
	"\vSessionStop\x1a\xac\x01\n" +
	"\x10AcquireSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0etimeout_millis\x18\x03 \x01(\x04R\rtimeoutMillis\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x04R\x05count\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x12\x1c\n" +
	"\tephemeral\x18\x06 \x01(\bR\tephemeral\x1a=\n" +
	"\x10ReleaseSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x1a\xd0\x01\n" +
	"\x11DescribeSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0einclude_owners\x18\x03 \x01(\bR\rincludeOwners\x12'\n" +
	"\x0finclude_waiters\x18\x04 \x01(\bR\x0eincludeWaiters\x12\x1d\n" +
	"\n" +
	"watch_data\x18\x05 \x01(\bR\twatchData\x12!\n" +
	"\fwatch_owners\x18\x06 \x01(\bR\vwatchOwners\x1af\n" +
	"\x0fCreateSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x04R\x05limit\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x1aP\n" +
	"\x0fUpdateSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x1aR\n" +
	"\x0fDeleteSemaphore\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05forceB\t\n" +
	"\arequest\"\xbc\x19\n" +
	"\x0fSessionResponse\x12@\n" +
	"\x04ping\x18\x01 \x01(\v2*.Ydb.Coordination.SessionResponse.PingPongH\x00R\x04ping\x12@\n" +
	"\x04pong\x18\x02 \x01(\v2*.Ydb.Coordination.SessionResponse.PingPongH\x00R\x04pong\x12E\n" +
	"\afailure\x18\x03 \x01(\v2).Ydb.Coordination.SessionResponse.FailureH\x00R\afailure\x12[\n" +
	"\x0fsession_started\x18\x04 \x01(\v20.Ydb.Coordination.SessionResponse.SessionStartedH\x00R\x0esessionStarted\x12[\n" +
	"\x0fsession_stopped\x18\x05 \x01(\v20.Ydb.Coordination.SessionResponse.SessionStoppedH\x00R\x0esessionStopped\x12D\n" +
	"\runsupported_6\x18\x06 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\funsupported6\x12D\n" +
	"\runsupported_7\x18\a \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\funsupported7\x12w\n" +
	"\x19acquire_semaphore_pending\x18\b \x01(\v29.Ydb.Coordination.SessionResponse.AcquireSemaphorePendingH\x00R\x17acquireSemaphorePending\x12t\n" +
	"\x18acquire_semaphore_result\x18\t \x01(\v28.Ydb.Coordination.SessionResponse.AcquireSemaphoreResultH\x00R\x16acquireSemaphoreResult\x12t\n" +
	"\x18release_semaphore_result\x18\n" +
	" \x01(\v28.Ydb.Coordination.SessionResponse.ReleaseSemaphoreResultH\x00R\x16releaseSemaphoreResult\x12w\n" +
	"\x19describe_semaphore_result\x18\v \x01(\v29.Ydb.Coordination.SessionResponse.DescribeSemaphoreResultH\x00R\x17describeSemaphoreResult\x12z\n" +
	"\x1adescribe_semaphore_changed\x18\f \x01(\v2:.Ydb.Coordination.SessionResponse.DescribeSemaphoreChangedH\x00R\x18describeSemaphoreChanged\x12q\n" +
	"\x17create_semaphore_result\x18\r \x01(\v27.Ydb.Coordination.SessionResponse.CreateSemaphoreResultH\x00R\x15createSemaphoreResult\x12q\n" +
	"\x17update_semaphore_result\x18\x0e \x01(\v27.Ydb.Coordination.SessionResponse.UpdateSemaphoreResultH\x00R\x15updateSemaphoreResult\x12q\n" +
	"\x17delete_semaphore_result\x18\x0f \x01(\v27.Ydb.Coordination.SessionResponse.DeleteSemaphoreResultH\x00R\x15deleteSemaphoreResult\x12F\n" +
	"\x0eunsupported_16\x18\x10 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported16\x12F\n" +
	"\x0eunsupported_17\x18\x11 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported17\x12F\n" +
	"\x0eunsupported_18\x18\x12 \x01(\v2\x1d.Ydb.Coordination.UnsupportedH\x00R\runsupported18\x1a\"\n" +
	"\bPingPong\x12\x16\n" +
	"\x06opaque\x18\x01 \x01(\x04R\x06opaque\x1am\n" +
	"\aFailure\x121\n" +
	"\x06status\x18\x01 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x02 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x1aV\n" +
	"\x0eSessionStarted\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x04R\tsessionId\x12%\n" +
	"\x0etimeout_millis\x18\x02 \x01(\x04R\rtimeoutMillis\x1a/\n" +
	"\x0eSessionStopped\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x04R\tsessionId\x1a0\n" +
	"\x17AcquireSemaphorePending\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x1a\xaf\x01\n" +
	"\x16AcquireSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x12\x1a\n" +
	"\bacquired\x18\x04 \x01(\bR\bacquired\x1a\xaf\x01\n" +
	"\x16ReleaseSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x12\x1a\n" +
	"\breleased\x18\x04 \x01(\bR\breleased\x1a\x92\x02\n" +
	"\x17DescribeSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x12[\n" +
	"\x15semaphore_description\x18\x04 \x01(\v2&.Ydb.Coordination.SemaphoreDescriptionR\x14semaphoreDescription\x12\x1f\n" +
	"\vwatch_added\x18\x05 \x01(\bR\n" +
	"watchAdded\x1a{\n" +
	"\x18DescribeSemaphoreChanged\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x12!\n" +
	"\fdata_changed\x18\x02 \x01(\bR\vdataChanged\x12%\n" +
	"\x0eowners_changed\x18\x03 \x01(\bR\rownersChanged\x1a\x92\x01\n" +
	"\x15CreateSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x1a\x92\x01\n" +
	"\x15UpdateSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issues\x1a\x92\x01\n" +
	"\x15DeleteSemaphoreResult\x12\x15\n" +
	"\x06req_id\x18\x01 \x01(\x04R\x05reqId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.Ydb.StatusIds.StatusCodeR\x06status\x12/\n" +
	"\x06issues\x18\x03 \x03(\v2\x17.Ydb.Issue.IssueMessageR\x06issuesB\n" +
	"\n" +
	"\bresponse\"\xa5\x01\n" +
	"\x11CreateNodeRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x120\n" +
	"\x06config\x18\x02 \x01(\v2\x18.Ydb.Coordination.ConfigR\x06config\x12J\n" +
	"\x10operation_params\x18\x03 \x01(\v2\x1f.Ydb.Operations.OperationParamsR\x0foperationParams\"M\n" +
	"\x12CreateNodeResponse\x127\n" +
	"\toperation\x18\x01 \x01(\v2\x19.Ydb.Operations.OperationR\toperation\"\xa4\x01\n" +
	"\x10AlterNodeRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x120\n" +
	"\x06config\x18\x02 \x01(\v2\x18.Ydb.Coordination.ConfigR\x06config\x12J\n" +
	"\x10operation_params\x18\x03 \x01(\v2\x1f.Ydb.Operations.OperationParamsR\x0foperationParams\"L\n" +
	"\x11AlterNodeResponse\x127\n" +
	"\toperation\x18\x01 \x01(\v2\x19.Ydb.Operations.OperationR\toperation\"q\n" +
	"\x0fDropNodeRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12J\n" +
	"\x10operation_params\x18\x02 \x01(\v2\x1f.Ydb.Operations.OperationParamsR\x0foperationParams\"K\n" +
	"\x10DropNodeResponse\x127\n" +
	"\toperation\x18\x01 \x01(\v2\x19.Ydb.Operations.OperationR\toperation\"u\n" +
	"\x13DescribeNodeRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12J\n" +
	"\x10operation_params\x18\x02 \x01(\v2\x1f.Ydb.Operations.OperationParamsR\x0foperationParams\"O\n" +
	"\x14DescribeNodeResponse\x127\n" +
	"\toperation\x18\x01 \x01(\v2\x19.Ydb.Operations.OperationR\toperation\"m\n" +
	"\x12DescribeNodeResult\x12%\n" +
	"\x04self\x18\x01 \x01(\v2\x11.Ydb.Scheme.EntryR\x04self\x120\n" +
	"\x06config\x18\x02 \x01(\v2\x18.Ydb.Coordination.ConfigR\x06config*h\n" +
	"\x0fConsistencyMode\x12\x1a\n" +
	"\x16CONSISTENCY_MODE_UNSET\x10\x00\x12\x1b\n" +
	"\x17CONSISTENCY_MODE_STRICT\x10\x01\x12\x1c\n" +
	"\x18CONSISTENCY_MODE_RELAXED\x10\x02*\x93\x01\n" +
	"\x17RateLimiterCountersMode\x12$\n" +
	" RATE_LIMITER_COUNTERS_MODE_UNSET\x10\x00\x12)\n" +
	"%RATE_LIMITER_COUNTERS_MODE_AGGREGATED\x10\x01\x12'\n" +
	"#RATE_LIMITER_COUNTERS_MODE_DETAILED\x10\x02B\x7f\n" +
	"\x1btech.ydb.proto.coordinationB\x12CoordinationProtosP\x01Z?github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Coordination\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_protos_ydb_coordination_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_ydb_coordination_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_protos_ydb_coordination_proto_goTypes = []any{
	(ConsistencyMode)(0),                             // 0: Ydb.Coordination.ConsistencyMode
	(RateLimiterCountersMode)(0),                     // 1: Ydb.Coordination.RateLimiterCountersMode
	(*Unsupported)(nil),                              // 2: Ydb.Coordination.Unsupported
	(*Config)(nil),                                   // 3: Ydb.Coordination.Config
	(*SessionDescription)(nil),                       // 4: Ydb.Coordination.SessionDescription
	(*SemaphoreSession)(nil),                         // 5: Ydb.Coordination.SemaphoreSession
	(*SemaphoreDescription)(nil),                     // 6: Ydb.Coordination.SemaphoreDescription
	(*SessionRequest)(nil),                           // 7: Ydb.Coordination.SessionRequest
	(*SessionResponse)(nil),                          // 8: Ydb.Coordination.SessionResponse
	(*CreateNodeRequest)(nil),                        // 9: Ydb.Coordination.CreateNodeRequest
	(*CreateNodeResponse)(nil),                       // 10: Ydb.Coordination.CreateNodeResponse
	(*AlterNodeRequest)(nil),                         // 11: Ydb.Coordination.AlterNodeRequest
	(*AlterNodeResponse)(nil),                        // 12: Ydb.Coordination.AlterNodeResponse
	(*DropNodeRequest)(nil),                          // 13: Ydb.Coordination.DropNodeRequest
	(*DropNodeResponse)(nil),                         // 14: Ydb.Coordination.DropNodeResponse
	(*DescribeNodeRequest)(nil),                      // 15: Ydb.Coordination.DescribeNodeRequest
	(*DescribeNodeResponse)(nil),                     // 16: Ydb.Coordination.DescribeNodeResponse
	(*DescribeNodeResult)(nil),                       // 17: Ydb.Coordination.DescribeNodeResult
	(*SessionRequest_PingPong)(nil),                  // 18: Ydb.Coordination.SessionRequest.PingPong
	(*SessionRequest_SessionStart)(nil),              // 19: Ydb.Coordination.SessionRequest.SessionStart
	(*SessionRequest_SessionStop)(nil),               // 20: Ydb.Coordination.SessionRequest.SessionStop
	(*SessionRequest_AcquireSemaphore)(nil),          // 21: Ydb.Coordination.SessionRequest.AcquireSemaphore
	(*SessionRequest_ReleaseSemaphore)(nil),          // 22: Ydb.Coordination.SessionRequest.ReleaseSemaphore
	(*SessionRequest_DescribeSemaphore)(nil),         // 23: Ydb.Coordination.SessionRequest.DescribeSemaphore
	(*SessionRequest_CreateSemaphore)(nil),           // 24: Ydb.Coordination.SessionRequest.CreateSemaphore
	(*SessionRequest_UpdateSemaphore)(nil),           // 25: Ydb.Coordination.SessionRequest.UpdateSemaphore
	(*SessionRequest_DeleteSemaphore)(nil),           // 26: Ydb.Coordination.SessionRequest.DeleteSemaphore
	(*SessionResponse_PingPong)(nil),                 // 27: Ydb.Coordination.SessionResponse.PingPong
	(*SessionResponse_Failure)(nil),                  // 28: Ydb.Coordination.SessionResponse.Failure
	(*SessionResponse_SessionStarted)(nil),           // 29: Ydb.Coordination.SessionResponse.SessionStarted
	(*SessionResponse_SessionStopped)(nil),           // 30: Ydb.Coordination.SessionResponse.SessionStopped
	(*SessionResponse_AcquireSemaphorePending)(nil),  // 31: Ydb.Coordination.SessionResponse.AcquireSemaphorePending
	(*SessionResponse_AcquireSemaphoreResult)(nil),   // 32: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult
	(*SessionResponse_ReleaseSemaphoreResult)(nil),   // 33: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult
	(*SessionResponse_DescribeSemaphoreResult)(nil),  // 34: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult
	(*SessionResponse_DescribeSemaphoreChanged)(nil), // 35: Ydb.Coordination.SessionResponse.DescribeSemaphoreChanged
	(*SessionResponse_CreateSemaphoreResult)(nil),    // 36: Ydb.Coordination.SessionResponse.CreateSemaphoreResult
	(*SessionResponse_UpdateSemaphoreResult)(nil),    // 37: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult
	(*SessionResponse_DeleteSemaphoreResult)(nil),    // 38: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult
	(*Ydb_Operations.OperationParams)(nil),           // 39: Ydb.Operations.OperationParams
	(*Ydb_Operations.Operation)(nil),                 // 40: Ydb.Operations.Operation
	(*Ydb_Scheme.Entry)(nil),                         // 41: Ydb.Scheme.Entry
	(Ydb.StatusIds_StatusCode)(0),                    // 42: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),                   // 43: Ydb.Issue.IssueMessage
}
var file_protos_ydb_coordination_proto_depIdxs = []int32{
	0,  // 0: Ydb.Coordination.Config.read_consistency_mode:type_name -> Ydb.Coordination.ConsistencyMode
	0,  // 1: Ydb.Coordination.Config.attach_consistency_mode:type_name -> Ydb.Coordination.ConsistencyMode
	1,  // 2: Ydb.Coordination.Config.rate_limiter_counters_mode:type_name -> Ydb.Coordination.RateLimiterCountersMode
	5,  // 3: Ydb.Coordination.SemaphoreDescription.owners:type_name -> Ydb.Coordination.SemaphoreSession
	5,  // 4: Ydb.Coordination.SemaphoreDescription.waiters:type_name -> Ydb.Coordination.SemaphoreSession
	18, // 5: Ydb.Coordination.SessionRequest.ping:type_name -> Ydb.Coordination.SessionRequest.PingPong
	18, // 6: Ydb.Coordination.SessionRequest.pong:type_name -> Ydb.Coordination.SessionRequest.PingPong
	19, // 7: Ydb.Coordination.SessionRequest.session_start:type_name -> Ydb.Coordination.SessionRequest.SessionStart
	20, // 8: Ydb.Coordination.SessionRequest.session_stop:type_name -> Ydb.Coordination.SessionRequest.SessionStop
	2,  // 9: Ydb.Coordination.SessionRequest.unsupported_5:type_name -> Ydb.Coordination.Unsupported
	2,  // 10: Ydb.Coordination.SessionRequest.unsupported_6:type_name -> Ydb.Coordination.Unsupported
	21, // 11: Ydb.Coordination.SessionRequest.acquire_semaphore:type_name -> Ydb.Coordination.SessionRequest.AcquireSemaphore
	22, // 12: Ydb.Coordination.SessionRequest.release_semaphore:type_name -> Ydb.Coordination.SessionRequest.ReleaseSemaphore
	23, // 13: Ydb.Coordination.SessionRequest.describe_semaphore:type_name -> Ydb.Coordination.SessionRequest.DescribeSemaphore
	24, // 14: Ydb.Coordination.SessionRequest.create_semaphore:type_name -> Ydb.Coordination.SessionRequest.CreateSemaphore
	25, // 15: Ydb.Coordination.SessionRequest.update_semaphore:type_name -> Ydb.Coordination.SessionRequest.UpdateSemaphore
	26, // 16: Ydb.Coordination.SessionRequest.delete_semaphore:type_name -> Ydb.Coordination.SessionRequest.DeleteSemaphore
	2,  // 17: Ydb.Coordination.SessionRequest.unsupported_13:type_name -> Ydb.Coordination.Unsupported
	2,  // 18: Ydb.Coordination.SessionRequest.unsupported_14:type_name -> Ydb.Coordination.Unsupported
	2,  // 19: Ydb.Coordination.SessionRequest.unsupported_15:type_name -> Ydb.Coordination.Unsupported
	27, // 20: Ydb.Coordination.SessionResponse.ping:type_name -> Ydb.Coordination.SessionResponse.PingPong
	27, // 21: Ydb.Coordination.SessionResponse.pong:type_name -> Ydb.Coordination.SessionResponse.PingPong
	28, // 22: Ydb.Coordination.SessionResponse.failure:type_name -> Ydb.Coordination.SessionResponse.Failure
	29, // 23: Ydb.Coordination.SessionResponse.session_started:type_name -> Ydb.Coordination.SessionResponse.SessionStarted
	30, // 24: Ydb.Coordination.SessionResponse.session_stopped:type_name -> Ydb.Coordination.SessionResponse.SessionStopped
	2,  // 25: Ydb.Coordination.SessionResponse.unsupported_6:type_name -> Ydb.Coordination.Unsupported
	2,  // 26: Ydb.Coordination.SessionResponse.unsupported_7:type_name -> Ydb.Coordination.Unsupported
	31, // 27: Ydb.Coordination.SessionResponse.acquire_semaphore_pending:type_name -> Ydb.Coordination.SessionResponse.AcquireSemaphorePending
	32, // 28: Ydb.Coordination.SessionResponse.acquire_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.AcquireSemaphoreResult
	33, // 29: Ydb.Coordination.SessionResponse.release_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult
	34, // 30: Ydb.Coordination.SessionResponse.describe_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.DescribeSemaphoreResult
	35, // 31: Ydb.Coordination.SessionResponse.describe_semaphore_changed:type_name -> Ydb.Coordination.SessionResponse.DescribeSemaphoreChanged
	36, // 32: Ydb.Coordination.SessionResponse.create_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.CreateSemaphoreResult
	37, // 33: Ydb.Coordination.SessionResponse.update_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.UpdateSemaphoreResult
	38, // 34: Ydb.Coordination.SessionResponse.delete_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.DeleteSemaphoreResult
	2,  // 35: Ydb.Coordination.SessionResponse.unsupported_16:type_name -> Ydb.Coordination.Unsupported
	2,  // 36: Ydb.Coordination.SessionResponse.unsupported_17:type_name -> Ydb.Coordination.Unsupported
	2,  // 37: Ydb.Coordination.SessionResponse.unsupported_18:type_name -> Ydb.Coordination.Unsupported
	3,  // 38: Ydb.Coordination.CreateNodeRequest.config:type_name -> Ydb.Coordination.Config
	39, // 39: Ydb.Coordination.CreateNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	40, // 40: Ydb.Coordination.CreateNodeResponse.operation:type_name -> Ydb.Operations.Operation
	3,  // 41: Ydb.Coordination.AlterNodeRequest.config:type_name -> Ydb.Coordination.Config
	39, // 42: Ydb.Coordination.AlterNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	40, // 43: Ydb.Coordination.AlterNodeResponse.operation:type_name -> Ydb.Operations.Operation
	39, // 44: Ydb.Coordination.DropNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	40, // 45: Ydb.Coordination.DropNodeResponse.operation:type_name -> Ydb.Operations.Operation
	39, // 46: Ydb.Coordination.DescribeNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	40, // 47: Ydb.Coordination.DescribeNodeResponse.operation:type_name -> Ydb.Operations.Operation
	41, // 48: Ydb.Coordination.DescribeNodeResult.self:type_name -> Ydb.Scheme.Entry
	3,  // 49: Ydb.Coordination.DescribeNodeResult.config:type_name -> Ydb.Coordination.Config
	42, // 50: Ydb.Coordination.SessionResponse.Failure.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 51: Ydb.Coordination.SessionResponse.Failure.issues:type_name -> Ydb.Issue.IssueMessage
	42, // 52: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 53: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	42, // 54: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 55: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	42, // 56: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 57: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	6,  // 58: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.semaphore_description:type_name -> Ydb.Coordination.SemaphoreDescription
	42, // 59: Ydb.Coordination.SessionResponse.CreateSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 60: Ydb.Coordination.SessionResponse.CreateSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	42, // 61: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 62: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	42, // 63: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
	43, // 64: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_protos_ydb_coordination_proto_init() }
func file_protos_ydb_coordination_proto_init() {
	if File_protos_ydb_coordination_proto != nil {
		return
	}
	file_protos_ydb_coordination_proto_msgTypes[5].OneofWrappers = []any{
		(*SessionRequest_Ping)(nil),
		(*SessionRequest_Pong)(nil),
		(*SessionRequest_SessionStart_)(nil),
		(*SessionRequest_SessionStop_)(nil),
		(*SessionRequest_Unsupported_5)(nil),
		(*SessionRequest_Unsupported_6)(nil),
		(*SessionRequest_AcquireSemaphore_)(nil),
		(*SessionRequest_ReleaseSemaphore_)(nil),
		(*SessionRequest_DescribeSemaphore_)(nil),
		(*SessionRequest_CreateSemaphore_)(nil),
		(*SessionRequest_UpdateSemaphore_)(nil),
		(*SessionRequest_DeleteSemaphore_)(nil),
		(*SessionRequest_Unsupported_13)(nil),
		(*SessionRequest_Unsupported_14)(nil),
		(*SessionRequest_Unsupported_15)(nil),
	}
	file_protos_ydb_coordination_proto_msgTypes[6].OneofWrappers = []any{
		(*SessionResponse_Ping)(nil),
		(*SessionResponse_Pong)(nil),
		(*SessionResponse_Failure_)(nil),
		(*SessionResponse_SessionStarted_)(nil),
		(*SessionResponse_SessionStopped_)(nil),
		(*SessionResponse_Unsupported_6)(nil),
		(*SessionResponse_Unsupported_7)(nil),
		(*SessionResponse_AcquireSemaphorePending_)(nil),
		(*SessionResponse_AcquireSemaphoreResult_)(nil),
		(*SessionResponse_ReleaseSemaphoreResult_)(nil),
		(*SessionResponse_DescribeSemaphoreResult_)(nil),
		(*SessionResponse_DescribeSemaphoreChanged_)(nil),
		(*SessionResponse_CreateSemaphoreResult_)(nil),
		(*SessionResponse_UpdateSemaphoreResult_)(nil),
		(*SessionResponse_DeleteSemaphoreResult_)(nil),
		(*SessionResponse_Unsupported_16)(nil),
		(*SessionResponse_Unsupported_17)(nil),
		(*SessionResponse_Unsupported_18)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_ydb_coordination_proto_rawDesc), len(file_protos_ydb_coordination_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_coordination_proto_goTypes,
		DependencyIndexes: file_protos_ydb_coordination_proto_depIdxs,
		EnumInfos:         file_protos_ydb_coordination_proto_enumTypes,
		MessageInfos:      file_protos_ydb_coordination_proto_msgTypes,
	}.Build()
	File_protos_ydb_coordination_proto = out.File
	file_protos_ydb_coordination_proto_goTypes = nil
	file_protos_ydb_coordination_proto_depIdxs = nil
}
