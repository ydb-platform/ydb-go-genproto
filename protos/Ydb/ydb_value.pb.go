// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: protos/ydb_value.proto

//go:build !protoopaque

package Ydb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type_PrimitiveTypeId int32

const (
	Type_PRIMITIVE_TYPE_ID_UNSPECIFIED Type_PrimitiveTypeId = 0
	Type_BOOL                          Type_PrimitiveTypeId = 6
	Type_INT8                          Type_PrimitiveTypeId = 7
	Type_UINT8                         Type_PrimitiveTypeId = 5
	Type_INT16                         Type_PrimitiveTypeId = 8
	Type_UINT16                        Type_PrimitiveTypeId = 9
	Type_INT32                         Type_PrimitiveTypeId = 1
	Type_UINT32                        Type_PrimitiveTypeId = 2
	Type_INT64                         Type_PrimitiveTypeId = 3
	Type_UINT64                        Type_PrimitiveTypeId = 4
	Type_FLOAT                         Type_PrimitiveTypeId = 33
	Type_DOUBLE                        Type_PrimitiveTypeId = 32
	Type_DATE                          Type_PrimitiveTypeId = 48
	Type_DATETIME                      Type_PrimitiveTypeId = 49
	Type_TIMESTAMP                     Type_PrimitiveTypeId = 50
	Type_INTERVAL                      Type_PrimitiveTypeId = 51
	Type_TZ_DATE                       Type_PrimitiveTypeId = 52
	Type_TZ_DATETIME                   Type_PrimitiveTypeId = 53
	Type_TZ_TIMESTAMP                  Type_PrimitiveTypeId = 54
	Type_DATE32                        Type_PrimitiveTypeId = 64
	Type_DATETIME64                    Type_PrimitiveTypeId = 65
	Type_TIMESTAMP64                   Type_PrimitiveTypeId = 66
	Type_INTERVAL64                    Type_PrimitiveTypeId = 67
	Type_STRING                        Type_PrimitiveTypeId = 4097
	Type_UTF8                          Type_PrimitiveTypeId = 4608
	Type_YSON                          Type_PrimitiveTypeId = 4609
	Type_JSON                          Type_PrimitiveTypeId = 4610
	Type_UUID                          Type_PrimitiveTypeId = 4611
	Type_JSON_DOCUMENT                 Type_PrimitiveTypeId = 4612
	Type_DYNUMBER                      Type_PrimitiveTypeId = 4866
)

// Enum value maps for Type_PrimitiveTypeId.
var (
	Type_PrimitiveTypeId_name = map[int32]string{
		0:    "PRIMITIVE_TYPE_ID_UNSPECIFIED",
		6:    "BOOL",
		7:    "INT8",
		5:    "UINT8",
		8:    "INT16",
		9:    "UINT16",
		1:    "INT32",
		2:    "UINT32",
		3:    "INT64",
		4:    "UINT64",
		33:   "FLOAT",
		32:   "DOUBLE",
		48:   "DATE",
		49:   "DATETIME",
		50:   "TIMESTAMP",
		51:   "INTERVAL",
		52:   "TZ_DATE",
		53:   "TZ_DATETIME",
		54:   "TZ_TIMESTAMP",
		64:   "DATE32",
		65:   "DATETIME64",
		66:   "TIMESTAMP64",
		67:   "INTERVAL64",
		4097: "STRING",
		4608: "UTF8",
		4609: "YSON",
		4610: "JSON",
		4611: "UUID",
		4612: "JSON_DOCUMENT",
		4866: "DYNUMBER",
	}
	Type_PrimitiveTypeId_value = map[string]int32{
		"PRIMITIVE_TYPE_ID_UNSPECIFIED": 0,
		"BOOL":                          6,
		"INT8":                          7,
		"UINT8":                         5,
		"INT16":                         8,
		"UINT16":                        9,
		"INT32":                         1,
		"UINT32":                        2,
		"INT64":                         3,
		"UINT64":                        4,
		"FLOAT":                         33,
		"DOUBLE":                        32,
		"DATE":                          48,
		"DATETIME":                      49,
		"TIMESTAMP":                     50,
		"INTERVAL":                      51,
		"TZ_DATE":                       52,
		"TZ_DATETIME":                   53,
		"TZ_TIMESTAMP":                  54,
		"DATE32":                        64,
		"DATETIME64":                    65,
		"TIMESTAMP64":                   66,
		"INTERVAL64":                    67,
		"STRING":                        4097,
		"UTF8":                          4608,
		"YSON":                          4609,
		"JSON":                          4610,
		"UUID":                          4611,
		"JSON_DOCUMENT":                 4612,
		"DYNUMBER":                      4866,
	}
)

func (x Type_PrimitiveTypeId) Enum() *Type_PrimitiveTypeId {
	p := new(Type_PrimitiveTypeId)
	*p = x
	return p
}

func (x Type_PrimitiveTypeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type_PrimitiveTypeId) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_value_proto_enumTypes[0].Descriptor()
}

func (Type_PrimitiveTypeId) Type() protoreflect.EnumType {
	return &file_protos_ydb_value_proto_enumTypes[0]
}

func (x Type_PrimitiveTypeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type DecimalType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Precision     *uint32                `protobuf:"varint,1,opt,name=precision" json:"precision,omitempty"`
	Scale         *uint32                `protobuf:"varint,2,opt,name=scale" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecimalType) Reset() {
	*x = DecimalType{}
	mi := &file_protos_ydb_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecimalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalType) ProtoMessage() {}

func (x *DecimalType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DecimalType) GetPrecision() uint32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *DecimalType) GetScale() uint32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *DecimalType) SetPrecision(v uint32) {
	x.Precision = &v
}

func (x *DecimalType) SetScale(v uint32) {
	x.Scale = &v
}

func (x *DecimalType) HasPrecision() bool {
	if x == nil {
		return false
	}
	return x.Precision != nil
}

func (x *DecimalType) HasScale() bool {
	if x == nil {
		return false
	}
	return x.Scale != nil
}

func (x *DecimalType) ClearPrecision() {
	x.Precision = nil
}

func (x *DecimalType) ClearScale() {
	x.Scale = nil
}

type DecimalType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Precision *uint32
	Scale     *uint32
}

func (b0 DecimalType_builder) Build() *DecimalType {
	m0 := &DecimalType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Precision = b.Precision
	x.Scale = b.Scale
	return m0
}

type OptionalType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Item          *Type                  `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalType) Reset() {
	*x = OptionalType{}
	mi := &file_protos_ydb_value_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalType) ProtoMessage() {}

func (x *OptionalType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OptionalType) GetItem() *Type {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *OptionalType) SetItem(v *Type) {
	x.Item = v
}

func (x *OptionalType) HasItem() bool {
	if x == nil {
		return false
	}
	return x.Item != nil
}

func (x *OptionalType) ClearItem() {
	x.Item = nil
}

type OptionalType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Item *Type
}

func (b0 OptionalType_builder) Build() *OptionalType {
	m0 := &OptionalType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Item = b.Item
	return m0
}

type ListType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Item          *Type                  `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListType) Reset() {
	*x = ListType{}
	mi := &file_protos_ydb_value_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListType) ProtoMessage() {}

func (x *ListType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListType) GetItem() *Type {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ListType) SetItem(v *Type) {
	x.Item = v
}

func (x *ListType) HasItem() bool {
	if x == nil {
		return false
	}
	return x.Item != nil
}

func (x *ListType) ClearItem() {
	x.Item = nil
}

type ListType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Item *Type
}

func (b0 ListType_builder) Build() *ListType {
	m0 := &ListType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Item = b.Item
	return m0
}

type VariantType struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*VariantType_TupleItems
	//	*VariantType_StructItems
	Type          isVariantType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VariantType) Reset() {
	*x = VariantType{}
	mi := &file_protos_ydb_value_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VariantType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariantType) ProtoMessage() {}

func (x *VariantType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VariantType) GetType() isVariantType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VariantType) GetTupleItems() *TupleType {
	if x != nil {
		if x, ok := x.Type.(*VariantType_TupleItems); ok {
			return x.TupleItems
		}
	}
	return nil
}

func (x *VariantType) GetStructItems() *StructType {
	if x != nil {
		if x, ok := x.Type.(*VariantType_StructItems); ok {
			return x.StructItems
		}
	}
	return nil
}

func (x *VariantType) SetTupleItems(v *TupleType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &VariantType_TupleItems{v}
}

func (x *VariantType) SetStructItems(v *StructType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &VariantType_StructItems{v}
}

func (x *VariantType) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *VariantType) HasTupleItems() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*VariantType_TupleItems)
	return ok
}

func (x *VariantType) HasStructItems() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*VariantType_StructItems)
	return ok
}

func (x *VariantType) ClearType() {
	x.Type = nil
}

func (x *VariantType) ClearTupleItems() {
	if _, ok := x.Type.(*VariantType_TupleItems); ok {
		x.Type = nil
	}
}

func (x *VariantType) ClearStructItems() {
	if _, ok := x.Type.(*VariantType_StructItems); ok {
		x.Type = nil
	}
}

const VariantType_Type_not_set_case case_VariantType_Type = 0
const VariantType_TupleItems_case case_VariantType_Type = 1
const VariantType_StructItems_case case_VariantType_Type = 2

func (x *VariantType) WhichType() case_VariantType_Type {
	if x == nil {
		return VariantType_Type_not_set_case
	}
	switch x.Type.(type) {
	case *VariantType_TupleItems:
		return VariantType_TupleItems_case
	case *VariantType_StructItems:
		return VariantType_StructItems_case
	default:
		return VariantType_Type_not_set_case
	}
}

type VariantType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Type:
	TupleItems  *TupleType
	StructItems *StructType
	// -- end of Type
}

func (b0 VariantType_builder) Build() *VariantType {
	m0 := &VariantType{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TupleItems != nil {
		x.Type = &VariantType_TupleItems{b.TupleItems}
	}
	if b.StructItems != nil {
		x.Type = &VariantType_StructItems{b.StructItems}
	}
	return m0
}

type case_VariantType_Type protoreflect.FieldNumber

func (x case_VariantType_Type) String() string {
	md := file_protos_ydb_value_proto_msgTypes[3].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isVariantType_Type interface {
	isVariantType_Type()
}

type VariantType_TupleItems struct {
	TupleItems *TupleType `protobuf:"bytes,1,opt,name=tuple_items,json=tupleItems,oneof"`
}

type VariantType_StructItems struct {
	StructItems *StructType `protobuf:"bytes,2,opt,name=struct_items,json=structItems,oneof"`
}

func (*VariantType_TupleItems) isVariantType_Type() {}

func (*VariantType_StructItems) isVariantType_Type() {}

type TupleType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Elements      []*Type                `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TupleType) Reset() {
	*x = TupleType{}
	mi := &file_protos_ydb_value_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TupleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleType) ProtoMessage() {}

func (x *TupleType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TupleType) GetElements() []*Type {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *TupleType) SetElements(v []*Type) {
	x.Elements = v
}

type TupleType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Elements []*Type
}

func (b0 TupleType_builder) Build() *TupleType {
	m0 := &TupleType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Elements = b.Elements
	return m0
}

type StructMember struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructMember) Reset() {
	*x = StructMember{}
	mi := &file_protos_ydb_value_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMember) ProtoMessage() {}

func (x *StructMember) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StructMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StructMember) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StructMember) SetName(v string) {
	x.Name = &v
}

func (x *StructMember) SetType(v *Type) {
	x.Type = v
}

func (x *StructMember) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *StructMember) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *StructMember) ClearName() {
	x.Name = nil
}

func (x *StructMember) ClearType() {
	x.Type = nil
}

type StructMember_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
	Type *Type
}

func (b0 StructMember_builder) Build() *StructMember {
	m0 := &StructMember{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Type = b.Type
	return m0
}

type StructType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Members       []*StructMember        `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructType) Reset() {
	*x = StructType{}
	mi := &file_protos_ydb_value_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructType) ProtoMessage() {}

func (x *StructType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StructType) GetMembers() []*StructMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *StructType) SetMembers(v []*StructMember) {
	x.Members = v
}

type StructType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Members []*StructMember
}

func (b0 StructType_builder) Build() *StructType {
	m0 := &StructType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Members = b.Members
	return m0
}

type DictType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Key           *Type                  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Payload       *Type                  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictType) Reset() {
	*x = DictType{}
	mi := &file_protos_ydb_value_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictType) ProtoMessage() {}

func (x *DictType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DictType) GetKey() *Type {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DictType) GetPayload() *Type {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DictType) SetKey(v *Type) {
	x.Key = v
}

func (x *DictType) SetPayload(v *Type) {
	x.Payload = v
}

func (x *DictType) HasKey() bool {
	if x == nil {
		return false
	}
	return x.Key != nil
}

func (x *DictType) HasPayload() bool {
	if x == nil {
		return false
	}
	return x.Payload != nil
}

func (x *DictType) ClearKey() {
	x.Key = nil
}

func (x *DictType) ClearPayload() {
	x.Payload = nil
}

type DictType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key     *Type
	Payload *Type
}

func (b0 DictType_builder) Build() *DictType {
	m0 := &DictType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Key = b.Key
	x.Payload = b.Payload
	return m0
}

type TaggedType struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Tag           *string                `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Type          *Type                  `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaggedType) Reset() {
	*x = TaggedType{}
	mi := &file_protos_ydb_value_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaggedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedType) ProtoMessage() {}

func (x *TaggedType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaggedType) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *TaggedType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TaggedType) SetTag(v string) {
	x.Tag = &v
}

func (x *TaggedType) SetType(v *Type) {
	x.Type = v
}

func (x *TaggedType) HasTag() bool {
	if x == nil {
		return false
	}
	return x.Tag != nil
}

func (x *TaggedType) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *TaggedType) ClearTag() {
	x.Tag = nil
}

func (x *TaggedType) ClearType() {
	x.Type = nil
}

type TaggedType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tag  *string
	Type *Type
}

func (b0 TaggedType_builder) Build() *TaggedType {
	m0 := &TaggedType{}
	b, x := &b0, m0
	_, _ = b, x
	x.Tag = b.Tag
	x.Type = b.Type
	return m0
}

type PgType struct {
	state        protoimpl.MessageState `protogen:"hybrid.v1"`
	TypeName     *string                `protobuf:"bytes,10,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	TypeModifier *string                `protobuf:"bytes,11,opt,name=type_modifier,json=typeModifier" json:"type_modifier,omitempty"`
	// pg object id of the type
	// full registry could be found here: https://github.com/postgres/postgres/blob/master/src/include/catalog/pg_type.dat
	Oid *uint32 `protobuf:"varint,1,opt,name=oid" json:"oid,omitempty"`
	// advanced type details useful for pg wire format proxying
	Typlen        *int32 `protobuf:"varint,2,opt,name=typlen" json:"typlen,omitempty"`
	Typmod        *int32 `protobuf:"varint,3,opt,name=typmod" json:"typmod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgType) Reset() {
	*x = PgType{}
	mi := &file_protos_ydb_value_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgType) ProtoMessage() {}

func (x *PgType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PgType) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *PgType) GetTypeModifier() string {
	if x != nil && x.TypeModifier != nil {
		return *x.TypeModifier
	}
	return ""
}

func (x *PgType) GetOid() uint32 {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return 0
}

func (x *PgType) GetTyplen() int32 {
	if x != nil && x.Typlen != nil {
		return *x.Typlen
	}
	return 0
}

func (x *PgType) GetTypmod() int32 {
	if x != nil && x.Typmod != nil {
		return *x.Typmod
	}
	return 0
}

func (x *PgType) SetTypeName(v string) {
	x.TypeName = &v
}

func (x *PgType) SetTypeModifier(v string) {
	x.TypeModifier = &v
}

func (x *PgType) SetOid(v uint32) {
	x.Oid = &v
}

func (x *PgType) SetTyplen(v int32) {
	x.Typlen = &v
}

func (x *PgType) SetTypmod(v int32) {
	x.Typmod = &v
}

func (x *PgType) HasTypeName() bool {
	if x == nil {
		return false
	}
	return x.TypeName != nil
}

func (x *PgType) HasTypeModifier() bool {
	if x == nil {
		return false
	}
	return x.TypeModifier != nil
}

func (x *PgType) HasOid() bool {
	if x == nil {
		return false
	}
	return x.Oid != nil
}

func (x *PgType) HasTyplen() bool {
	if x == nil {
		return false
	}
	return x.Typlen != nil
}

func (x *PgType) HasTypmod() bool {
	if x == nil {
		return false
	}
	return x.Typmod != nil
}

func (x *PgType) ClearTypeName() {
	x.TypeName = nil
}

func (x *PgType) ClearTypeModifier() {
	x.TypeModifier = nil
}

func (x *PgType) ClearOid() {
	x.Oid = nil
}

func (x *PgType) ClearTyplen() {
	x.Typlen = nil
}

func (x *PgType) ClearTypmod() {
	x.Typmod = nil
}

type PgType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TypeName     *string
	TypeModifier *string
	// pg object id of the type
	// full registry could be found here: https://github.com/postgres/postgres/blob/master/src/include/catalog/pg_type.dat
	Oid *uint32
	// advanced type details useful for pg wire format proxying
	Typlen *int32
	Typmod *int32
}

func (b0 PgType_builder) Build() *PgType {
	m0 := &PgType{}
	b, x := &b0, m0
	_, _ = b, x
	x.TypeName = b.TypeName
	x.TypeModifier = b.TypeModifier
	x.Oid = b.Oid
	x.Typlen = b.Typlen
	x.Typmod = b.Typmod
	return m0
}

type Type struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Type_TypeId
	//	*Type_DecimalType
	//	*Type_OptionalType
	//	*Type_ListType
	//	*Type_TupleType
	//	*Type_StructType
	//	*Type_DictType
	//	*Type_VariantType
	//	*Type_TaggedType
	//	*Type_VoidType
	//	*Type_NullType
	//	*Type_EmptyListType
	//	*Type_EmptyDictType
	//	*Type_PgType
	Type          isType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Type) Reset() {
	*x = Type{}
	mi := &file_protos_ydb_value_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Type) GetType() isType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Type) GetTypeId() Type_PrimitiveTypeId {
	if x != nil {
		if x, ok := x.Type.(*Type_TypeId); ok {
			return x.TypeId
		}
	}
	return Type_PRIMITIVE_TYPE_ID_UNSPECIFIED
}

func (x *Type) GetDecimalType() *DecimalType {
	if x != nil {
		if x, ok := x.Type.(*Type_DecimalType); ok {
			return x.DecimalType
		}
	}
	return nil
}

func (x *Type) GetOptionalType() *OptionalType {
	if x != nil {
		if x, ok := x.Type.(*Type_OptionalType); ok {
			return x.OptionalType
		}
	}
	return nil
}

func (x *Type) GetListType() *ListType {
	if x != nil {
		if x, ok := x.Type.(*Type_ListType); ok {
			return x.ListType
		}
	}
	return nil
}

func (x *Type) GetTupleType() *TupleType {
	if x != nil {
		if x, ok := x.Type.(*Type_TupleType); ok {
			return x.TupleType
		}
	}
	return nil
}

func (x *Type) GetStructType() *StructType {
	if x != nil {
		if x, ok := x.Type.(*Type_StructType); ok {
			return x.StructType
		}
	}
	return nil
}

func (x *Type) GetDictType() *DictType {
	if x != nil {
		if x, ok := x.Type.(*Type_DictType); ok {
			return x.DictType
		}
	}
	return nil
}

func (x *Type) GetVariantType() *VariantType {
	if x != nil {
		if x, ok := x.Type.(*Type_VariantType); ok {
			return x.VariantType
		}
	}
	return nil
}

func (x *Type) GetTaggedType() *TaggedType {
	if x != nil {
		if x, ok := x.Type.(*Type_TaggedType); ok {
			return x.TaggedType
		}
	}
	return nil
}

func (x *Type) GetVoidType() structpb.NullValue {
	if x != nil {
		if x, ok := x.Type.(*Type_VoidType); ok {
			return x.VoidType
		}
	}
	return structpb.NullValue(0)
}

func (x *Type) GetNullType() structpb.NullValue {
	if x != nil {
		if x, ok := x.Type.(*Type_NullType); ok {
			return x.NullType
		}
	}
	return structpb.NullValue(0)
}

func (x *Type) GetEmptyListType() structpb.NullValue {
	if x != nil {
		if x, ok := x.Type.(*Type_EmptyListType); ok {
			return x.EmptyListType
		}
	}
	return structpb.NullValue(0)
}

func (x *Type) GetEmptyDictType() structpb.NullValue {
	if x != nil {
		if x, ok := x.Type.(*Type_EmptyDictType); ok {
			return x.EmptyDictType
		}
	}
	return structpb.NullValue(0)
}

func (x *Type) GetPgType() *PgType {
	if x != nil {
		if x, ok := x.Type.(*Type_PgType); ok {
			return x.PgType
		}
	}
	return nil
}

func (x *Type) SetTypeId(v Type_PrimitiveTypeId) {
	x.Type = &Type_TypeId{v}
}

func (x *Type) SetDecimalType(v *DecimalType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_DecimalType{v}
}

func (x *Type) SetOptionalType(v *OptionalType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_OptionalType{v}
}

func (x *Type) SetListType(v *ListType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_ListType{v}
}

func (x *Type) SetTupleType(v *TupleType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_TupleType{v}
}

func (x *Type) SetStructType(v *StructType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_StructType{v}
}

func (x *Type) SetDictType(v *DictType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_DictType{v}
}

func (x *Type) SetVariantType(v *VariantType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_VariantType{v}
}

func (x *Type) SetTaggedType(v *TaggedType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_TaggedType{v}
}

func (x *Type) SetVoidType(v structpb.NullValue) {
	x.Type = &Type_VoidType{v}
}

func (x *Type) SetNullType(v structpb.NullValue) {
	x.Type = &Type_NullType{v}
}

func (x *Type) SetEmptyListType(v structpb.NullValue) {
	x.Type = &Type_EmptyListType{v}
}

func (x *Type) SetEmptyDictType(v structpb.NullValue) {
	x.Type = &Type_EmptyDictType{v}
}

func (x *Type) SetPgType(v *PgType) {
	if v == nil {
		x.Type = nil
		return
	}
	x.Type = &Type_PgType{v}
}

func (x *Type) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *Type) HasTypeId() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_TypeId)
	return ok
}

func (x *Type) HasDecimalType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_DecimalType)
	return ok
}

func (x *Type) HasOptionalType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_OptionalType)
	return ok
}

func (x *Type) HasListType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_ListType)
	return ok
}

func (x *Type) HasTupleType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_TupleType)
	return ok
}

func (x *Type) HasStructType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_StructType)
	return ok
}

func (x *Type) HasDictType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_DictType)
	return ok
}

func (x *Type) HasVariantType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_VariantType)
	return ok
}

func (x *Type) HasTaggedType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_TaggedType)
	return ok
}

func (x *Type) HasVoidType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_VoidType)
	return ok
}

func (x *Type) HasNullType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_NullType)
	return ok
}

func (x *Type) HasEmptyListType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_EmptyListType)
	return ok
}

func (x *Type) HasEmptyDictType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_EmptyDictType)
	return ok
}

func (x *Type) HasPgType() bool {
	if x == nil {
		return false
	}
	_, ok := x.Type.(*Type_PgType)
	return ok
}

func (x *Type) ClearType() {
	x.Type = nil
}

func (x *Type) ClearTypeId() {
	if _, ok := x.Type.(*Type_TypeId); ok {
		x.Type = nil
	}
}

func (x *Type) ClearDecimalType() {
	if _, ok := x.Type.(*Type_DecimalType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearOptionalType() {
	if _, ok := x.Type.(*Type_OptionalType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearListType() {
	if _, ok := x.Type.(*Type_ListType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearTupleType() {
	if _, ok := x.Type.(*Type_TupleType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearStructType() {
	if _, ok := x.Type.(*Type_StructType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearDictType() {
	if _, ok := x.Type.(*Type_DictType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearVariantType() {
	if _, ok := x.Type.(*Type_VariantType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearTaggedType() {
	if _, ok := x.Type.(*Type_TaggedType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearVoidType() {
	if _, ok := x.Type.(*Type_VoidType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearNullType() {
	if _, ok := x.Type.(*Type_NullType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearEmptyListType() {
	if _, ok := x.Type.(*Type_EmptyListType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearEmptyDictType() {
	if _, ok := x.Type.(*Type_EmptyDictType); ok {
		x.Type = nil
	}
}

func (x *Type) ClearPgType() {
	if _, ok := x.Type.(*Type_PgType); ok {
		x.Type = nil
	}
}

const Type_Type_not_set_case case_Type_Type = 0
const Type_TypeId_case case_Type_Type = 1
const Type_DecimalType_case case_Type_Type = 2
const Type_OptionalType_case case_Type_Type = 101
const Type_ListType_case case_Type_Type = 102
const Type_TupleType_case case_Type_Type = 103
const Type_StructType_case case_Type_Type = 104
const Type_DictType_case case_Type_Type = 105
const Type_VariantType_case case_Type_Type = 106
const Type_TaggedType_case case_Type_Type = 107
const Type_VoidType_case case_Type_Type = 201
const Type_NullType_case case_Type_Type = 202
const Type_EmptyListType_case case_Type_Type = 203
const Type_EmptyDictType_case case_Type_Type = 204
const Type_PgType_case case_Type_Type = 205

func (x *Type) WhichType() case_Type_Type {
	if x == nil {
		return Type_Type_not_set_case
	}
	switch x.Type.(type) {
	case *Type_TypeId:
		return Type_TypeId_case
	case *Type_DecimalType:
		return Type_DecimalType_case
	case *Type_OptionalType:
		return Type_OptionalType_case
	case *Type_ListType:
		return Type_ListType_case
	case *Type_TupleType:
		return Type_TupleType_case
	case *Type_StructType:
		return Type_StructType_case
	case *Type_DictType:
		return Type_DictType_case
	case *Type_VariantType:
		return Type_VariantType_case
	case *Type_TaggedType:
		return Type_TaggedType_case
	case *Type_VoidType:
		return Type_VoidType_case
	case *Type_NullType:
		return Type_NullType_case
	case *Type_EmptyListType:
		return Type_EmptyListType_case
	case *Type_EmptyDictType:
		return Type_EmptyDictType_case
	case *Type_PgType:
		return Type_PgType_case
	default:
		return Type_Type_not_set_case
	}
}

type Type_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Type:
	// Data types
	TypeId      *Type_PrimitiveTypeId
	DecimalType *DecimalType
	// Container types
	OptionalType *OptionalType
	ListType     *ListType
	TupleType    *TupleType
	StructType   *StructType
	DictType     *DictType
	VariantType  *VariantType
	TaggedType   *TaggedType
	// Special types
	VoidType      *structpb.NullValue
	NullType      *structpb.NullValue
	EmptyListType *structpb.NullValue
	EmptyDictType *structpb.NullValue
	PgType        *PgType
	// -- end of Type
}

func (b0 Type_builder) Build() *Type {
	m0 := &Type{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TypeId != nil {
		x.Type = &Type_TypeId{*b.TypeId}
	}
	if b.DecimalType != nil {
		x.Type = &Type_DecimalType{b.DecimalType}
	}
	if b.OptionalType != nil {
		x.Type = &Type_OptionalType{b.OptionalType}
	}
	if b.ListType != nil {
		x.Type = &Type_ListType{b.ListType}
	}
	if b.TupleType != nil {
		x.Type = &Type_TupleType{b.TupleType}
	}
	if b.StructType != nil {
		x.Type = &Type_StructType{b.StructType}
	}
	if b.DictType != nil {
		x.Type = &Type_DictType{b.DictType}
	}
	if b.VariantType != nil {
		x.Type = &Type_VariantType{b.VariantType}
	}
	if b.TaggedType != nil {
		x.Type = &Type_TaggedType{b.TaggedType}
	}
	if b.VoidType != nil {
		x.Type = &Type_VoidType{*b.VoidType}
	}
	if b.NullType != nil {
		x.Type = &Type_NullType{*b.NullType}
	}
	if b.EmptyListType != nil {
		x.Type = &Type_EmptyListType{*b.EmptyListType}
	}
	if b.EmptyDictType != nil {
		x.Type = &Type_EmptyDictType{*b.EmptyDictType}
	}
	if b.PgType != nil {
		x.Type = &Type_PgType{b.PgType}
	}
	return m0
}

type case_Type_Type protoreflect.FieldNumber

func (x case_Type_Type) String() string {
	md := file_protos_ydb_value_proto_msgTypes[10].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isType_Type interface {
	isType_Type()
}

type Type_TypeId struct {
	// Data types
	TypeId Type_PrimitiveTypeId `protobuf:"varint,1,opt,name=type_id,json=typeId,enum=Ydb.Type_PrimitiveTypeId,oneof"`
}

type Type_DecimalType struct {
	DecimalType *DecimalType `protobuf:"bytes,2,opt,name=decimal_type,json=decimalType,oneof"`
}

type Type_OptionalType struct {
	// Container types
	OptionalType *OptionalType `protobuf:"bytes,101,opt,name=optional_type,json=optionalType,oneof"`
}

type Type_ListType struct {
	ListType *ListType `protobuf:"bytes,102,opt,name=list_type,json=listType,oneof"`
}

type Type_TupleType struct {
	TupleType *TupleType `protobuf:"bytes,103,opt,name=tuple_type,json=tupleType,oneof"`
}

type Type_StructType struct {
	StructType *StructType `protobuf:"bytes,104,opt,name=struct_type,json=structType,oneof"`
}

type Type_DictType struct {
	DictType *DictType `protobuf:"bytes,105,opt,name=dict_type,json=dictType,oneof"`
}

type Type_VariantType struct {
	VariantType *VariantType `protobuf:"bytes,106,opt,name=variant_type,json=variantType,oneof"`
}

type Type_TaggedType struct {
	TaggedType *TaggedType `protobuf:"bytes,107,opt,name=tagged_type,json=taggedType,oneof"`
}

type Type_VoidType struct {
	// Special types
	VoidType structpb.NullValue `protobuf:"varint,201,opt,name=void_type,json=voidType,enum=google.protobuf.NullValue,oneof"`
}

type Type_NullType struct {
	NullType structpb.NullValue `protobuf:"varint,202,opt,name=null_type,json=nullType,enum=google.protobuf.NullValue,oneof"`
}

type Type_EmptyListType struct {
	EmptyListType structpb.NullValue `protobuf:"varint,203,opt,name=empty_list_type,json=emptyListType,enum=google.protobuf.NullValue,oneof"`
}

type Type_EmptyDictType struct {
	EmptyDictType structpb.NullValue `protobuf:"varint,204,opt,name=empty_dict_type,json=emptyDictType,enum=google.protobuf.NullValue,oneof"`
}

type Type_PgType struct {
	PgType *PgType `protobuf:"bytes,205,opt,name=pg_type,json=pgType,oneof"`
}

func (*Type_TypeId) isType_Type() {}

func (*Type_DecimalType) isType_Type() {}

func (*Type_OptionalType) isType_Type() {}

func (*Type_ListType) isType_Type() {}

func (*Type_TupleType) isType_Type() {}

func (*Type_StructType) isType_Type() {}

func (*Type_DictType) isType_Type() {}

func (*Type_VariantType) isType_Type() {}

func (*Type_TaggedType) isType_Type() {}

func (*Type_VoidType) isType_Type() {}

func (*Type_NullType) isType_Type() {}

func (*Type_EmptyListType) isType_Type() {}

func (*Type_EmptyDictType) isType_Type() {}

func (*Type_PgType) isType_Type() {}

type ValuePair struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Key           *Value                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Payload       *Value                 `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValuePair) Reset() {
	*x = ValuePair{}
	mi := &file_protos_ydb_value_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuePair) ProtoMessage() {}

func (x *ValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ValuePair) GetKey() *Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ValuePair) GetPayload() *Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ValuePair) SetKey(v *Value) {
	x.Key = v
}

func (x *ValuePair) SetPayload(v *Value) {
	x.Payload = v
}

func (x *ValuePair) HasKey() bool {
	if x == nil {
		return false
	}
	return x.Key != nil
}

func (x *ValuePair) HasPayload() bool {
	if x == nil {
		return false
	}
	return x.Payload != nil
}

func (x *ValuePair) ClearKey() {
	x.Key = nil
}

func (x *ValuePair) ClearPayload() {
	x.Payload = nil
}

type ValuePair_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key     *Value
	Payload *Value
}

func (b0 ValuePair_builder) Build() *ValuePair {
	m0 := &ValuePair{}
	b, x := &b0, m0
	_, _ = b, x
	x.Key = b.Key
	x.Payload = b.Payload
	return m0
}

type Value struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Value_BoolValue
	//	*Value_Int32Value
	//	*Value_Uint32Value
	//	*Value_Int64Value
	//	*Value_Uint64Value
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_BytesValue
	//	*Value_TextValue
	//	*Value_NullFlagValue
	//	*Value_NestedValue
	//	*Value_Low_128
	Value         isValue_Value `protobuf_oneof:"value"`
	Items         []*Value      `protobuf:"bytes,12,rep,name=items" json:"items,omitempty"`                                    // Used for List, Tuple, Struct types
	Pairs         []*ValuePair  `protobuf:"bytes,13,rep,name=pairs" json:"pairs,omitempty"`                                    // Used for Dict type
	VariantIndex  *uint32       `protobuf:"varint,14,opt,name=variant_index,json=variantIndex" json:"variant_index,omitempty"` // Used for Variant type
	High_128      *uint64       `protobuf:"fixed64,16,opt,name=high_128,json=high128" json:"high_128,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_protos_ydb_value_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Value) GetValue() isValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*Value_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *Value) GetInt32Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int32Value); ok {
			return x.Int32Value
		}
	}
	return 0
}

func (x *Value) GetUint32Value() uint32 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint32Value); ok {
			return x.Uint32Value
		}
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int64Value); ok {
			return x.Int64Value
		}
	}
	return 0
}

func (x *Value) GetUint64Value() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint64Value); ok {
			return x.Uint64Value
		}
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x != nil {
		if x, ok := x.Value.(*Value_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*Value_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *Value) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*Value_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *Value) GetTextValue() string {
	if x != nil {
		if x, ok := x.Value.(*Value_TextValue); ok {
			return x.TextValue
		}
	}
	return ""
}

func (x *Value) GetNullFlagValue() structpb.NullValue {
	if x != nil {
		if x, ok := x.Value.(*Value_NullFlagValue); ok {
			return x.NullFlagValue
		}
	}
	return structpb.NullValue(0)
}

func (x *Value) GetNestedValue() *Value {
	if x != nil {
		if x, ok := x.Value.(*Value_NestedValue); ok {
			return x.NestedValue
		}
	}
	return nil
}

func (x *Value) GetLow_128() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Low_128); ok {
			return x.Low_128
		}
	}
	return 0
}

func (x *Value) GetItems() []*Value {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Value) GetPairs() []*ValuePair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Value) GetVariantIndex() uint32 {
	if x != nil && x.VariantIndex != nil {
		return *x.VariantIndex
	}
	return 0
}

func (x *Value) GetHigh_128() uint64 {
	if x != nil && x.High_128 != nil {
		return *x.High_128
	}
	return 0
}

func (x *Value) SetBoolValue(v bool) {
	x.Value = &Value_BoolValue{v}
}

func (x *Value) SetInt32Value(v int32) {
	x.Value = &Value_Int32Value{v}
}

func (x *Value) SetUint32Value(v uint32) {
	x.Value = &Value_Uint32Value{v}
}

func (x *Value) SetInt64Value(v int64) {
	x.Value = &Value_Int64Value{v}
}

func (x *Value) SetUint64Value(v uint64) {
	x.Value = &Value_Uint64Value{v}
}

func (x *Value) SetFloatValue(v float32) {
	x.Value = &Value_FloatValue{v}
}

func (x *Value) SetDoubleValue(v float64) {
	x.Value = &Value_DoubleValue{v}
}

func (x *Value) SetBytesValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Value = &Value_BytesValue{v}
}

func (x *Value) SetTextValue(v string) {
	x.Value = &Value_TextValue{v}
}

func (x *Value) SetNullFlagValue(v structpb.NullValue) {
	x.Value = &Value_NullFlagValue{v}
}

func (x *Value) SetNestedValue(v *Value) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &Value_NestedValue{v}
}

func (x *Value) SetLow_128(v uint64) {
	x.Value = &Value_Low_128{v}
}

func (x *Value) SetItems(v []*Value) {
	x.Items = v
}

func (x *Value) SetPairs(v []*ValuePair) {
	x.Pairs = v
}

func (x *Value) SetVariantIndex(v uint32) {
	x.VariantIndex = &v
}

func (x *Value) SetHigh_128(v uint64) {
	x.High_128 = &v
}

func (x *Value) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *Value) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_BoolValue)
	return ok
}

func (x *Value) HasInt32Value() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_Int32Value)
	return ok
}

func (x *Value) HasUint32Value() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_Uint32Value)
	return ok
}

func (x *Value) HasInt64Value() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_Int64Value)
	return ok
}

func (x *Value) HasUint64Value() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_Uint64Value)
	return ok
}

func (x *Value) HasFloatValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_FloatValue)
	return ok
}

func (x *Value) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_DoubleValue)
	return ok
}

func (x *Value) HasBytesValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_BytesValue)
	return ok
}

func (x *Value) HasTextValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_TextValue)
	return ok
}

func (x *Value) HasNullFlagValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_NullFlagValue)
	return ok
}

func (x *Value) HasNestedValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_NestedValue)
	return ok
}

func (x *Value) HasLow_128() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*Value_Low_128)
	return ok
}

func (x *Value) HasVariantIndex() bool {
	if x == nil {
		return false
	}
	return x.VariantIndex != nil
}

func (x *Value) HasHigh_128() bool {
	if x == nil {
		return false
	}
	return x.High_128 != nil
}

func (x *Value) ClearValue() {
	x.Value = nil
}

func (x *Value) ClearBoolValue() {
	if _, ok := x.Value.(*Value_BoolValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearInt32Value() {
	if _, ok := x.Value.(*Value_Int32Value); ok {
		x.Value = nil
	}
}

func (x *Value) ClearUint32Value() {
	if _, ok := x.Value.(*Value_Uint32Value); ok {
		x.Value = nil
	}
}

func (x *Value) ClearInt64Value() {
	if _, ok := x.Value.(*Value_Int64Value); ok {
		x.Value = nil
	}
}

func (x *Value) ClearUint64Value() {
	if _, ok := x.Value.(*Value_Uint64Value); ok {
		x.Value = nil
	}
}

func (x *Value) ClearFloatValue() {
	if _, ok := x.Value.(*Value_FloatValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearDoubleValue() {
	if _, ok := x.Value.(*Value_DoubleValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearBytesValue() {
	if _, ok := x.Value.(*Value_BytesValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearTextValue() {
	if _, ok := x.Value.(*Value_TextValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearNullFlagValue() {
	if _, ok := x.Value.(*Value_NullFlagValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearNestedValue() {
	if _, ok := x.Value.(*Value_NestedValue); ok {
		x.Value = nil
	}
}

func (x *Value) ClearLow_128() {
	if _, ok := x.Value.(*Value_Low_128); ok {
		x.Value = nil
	}
}

func (x *Value) ClearVariantIndex() {
	x.VariantIndex = nil
}

func (x *Value) ClearHigh_128() {
	x.High_128 = nil
}

const Value_Value_not_set_case case_Value_Value = 0
const Value_BoolValue_case case_Value_Value = 1
const Value_Int32Value_case case_Value_Value = 2
const Value_Uint32Value_case case_Value_Value = 3
const Value_Int64Value_case case_Value_Value = 4
const Value_Uint64Value_case case_Value_Value = 5
const Value_FloatValue_case case_Value_Value = 6
const Value_DoubleValue_case case_Value_Value = 7
const Value_BytesValue_case case_Value_Value = 8
const Value_TextValue_case case_Value_Value = 9
const Value_NullFlagValue_case case_Value_Value = 10
const Value_NestedValue_case case_Value_Value = 11
const Value_Low_128_case case_Value_Value = 15

func (x *Value) WhichValue() case_Value_Value {
	if x == nil {
		return Value_Value_not_set_case
	}
	switch x.Value.(type) {
	case *Value_BoolValue:
		return Value_BoolValue_case
	case *Value_Int32Value:
		return Value_Int32Value_case
	case *Value_Uint32Value:
		return Value_Uint32Value_case
	case *Value_Int64Value:
		return Value_Int64Value_case
	case *Value_Uint64Value:
		return Value_Uint64Value_case
	case *Value_FloatValue:
		return Value_FloatValue_case
	case *Value_DoubleValue:
		return Value_DoubleValue_case
	case *Value_BytesValue:
		return Value_BytesValue_case
	case *Value_TextValue:
		return Value_TextValue_case
	case *Value_NullFlagValue:
		return Value_NullFlagValue_case
	case *Value_NestedValue:
		return Value_NestedValue_case
	case *Value_Low_128:
		return Value_Low_128_case
	default:
		return Value_Value_not_set_case
	}
}

type Value_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Value:
	BoolValue     *bool
	Int32Value    *int32
	Uint32Value   *uint32
	Int64Value    *int64
	Uint64Value   *uint64
	FloatValue    *float32
	DoubleValue   *float64
	BytesValue    []byte
	TextValue     *string
	NullFlagValue *structpb.NullValue
	NestedValue   *Value
	Low_128       *uint64
	// -- end of Value
	Items        []*Value
	Pairs        []*ValuePair
	VariantIndex *uint32
	High_128     *uint64
}

func (b0 Value_builder) Build() *Value {
	m0 := &Value{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BoolValue != nil {
		x.Value = &Value_BoolValue{*b.BoolValue}
	}
	if b.Int32Value != nil {
		x.Value = &Value_Int32Value{*b.Int32Value}
	}
	if b.Uint32Value != nil {
		x.Value = &Value_Uint32Value{*b.Uint32Value}
	}
	if b.Int64Value != nil {
		x.Value = &Value_Int64Value{*b.Int64Value}
	}
	if b.Uint64Value != nil {
		x.Value = &Value_Uint64Value{*b.Uint64Value}
	}
	if b.FloatValue != nil {
		x.Value = &Value_FloatValue{*b.FloatValue}
	}
	if b.DoubleValue != nil {
		x.Value = &Value_DoubleValue{*b.DoubleValue}
	}
	if b.BytesValue != nil {
		x.Value = &Value_BytesValue{b.BytesValue}
	}
	if b.TextValue != nil {
		x.Value = &Value_TextValue{*b.TextValue}
	}
	if b.NullFlagValue != nil {
		x.Value = &Value_NullFlagValue{*b.NullFlagValue}
	}
	if b.NestedValue != nil {
		x.Value = &Value_NestedValue{b.NestedValue}
	}
	if b.Low_128 != nil {
		x.Value = &Value_Low_128{*b.Low_128}
	}
	x.Items = b.Items
	x.Pairs = b.Pairs
	x.VariantIndex = b.VariantIndex
	x.High_128 = b.High_128
	return m0
}

type case_Value_Value protoreflect.FieldNumber

func (x case_Value_Value) String() string {
	md := file_protos_ydb_value_proto_msgTypes[12].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isValue_Value interface {
	isValue_Value()
}

type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,oneof"`
}

type Value_Int32Value struct {
	Int32Value int32 `protobuf:"fixed32,2,opt,name=int32_value,json=int32Value,oneof"`
}

type Value_Uint32Value struct {
	Uint32Value uint32 `protobuf:"fixed32,3,opt,name=uint32_value,json=uint32Value,oneof"`
}

type Value_Int64Value struct {
	Int64Value int64 `protobuf:"fixed64,4,opt,name=int64_value,json=int64Value,oneof"`
}

type Value_Uint64Value struct {
	Uint64Value uint64 `protobuf:"fixed64,5,opt,name=uint64_value,json=uint64Value,oneof"`
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=float_value,json=floatValue,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue,oneof"`
}

type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,8,opt,name=bytes_value,json=bytesValue,oneof"`
}

type Value_TextValue struct {
	TextValue string `protobuf:"bytes,9,opt,name=text_value,json=textValue,oneof"`
}

type Value_NullFlagValue struct {
	NullFlagValue structpb.NullValue `protobuf:"varint,10,opt,name=null_flag_value,json=nullFlagValue,enum=google.protobuf.NullValue,oneof"` // Set if current TValue is terminal Null
}

type Value_NestedValue struct {
	NestedValue *Value `protobuf:"bytes,11,opt,name=nested_value,json=nestedValue,oneof"` // Represents nested TValue for Optional<Optional<T>>(Null), or Variant<T> types
}

type Value_Low_128 struct {
	Low_128 uint64 `protobuf:"fixed64,15,opt,name=low_128,json=low128,oneof"`
}

func (*Value_BoolValue) isValue_Value() {}

func (*Value_Int32Value) isValue_Value() {}

func (*Value_Uint32Value) isValue_Value() {}

func (*Value_Int64Value) isValue_Value() {}

func (*Value_Uint64Value) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_BytesValue) isValue_Value() {}

func (*Value_TextValue) isValue_Value() {}

func (*Value_NullFlagValue) isValue_Value() {}

func (*Value_NestedValue) isValue_Value() {}

func (*Value_Low_128) isValue_Value() {}

type TypedValue struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Type          *Type                  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value         *Value                 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypedValue) Reset() {
	*x = TypedValue{}
	mi := &file_protos_ydb_value_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedValue) ProtoMessage() {}

func (x *TypedValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TypedValue) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TypedValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TypedValue) SetType(v *Type) {
	x.Type = v
}

func (x *TypedValue) SetValue(v *Value) {
	x.Value = v
}

func (x *TypedValue) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *TypedValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *TypedValue) ClearType() {
	x.Type = nil
}

func (x *TypedValue) ClearValue() {
	x.Value = nil
}

type TypedValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type  *Type
	Value *Value
}

func (b0 TypedValue_builder) Build() *TypedValue {
	m0 := &TypedValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Value = b.Value
	return m0
}

type Column struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Name of column
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Type of column
	Type          *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_protos_ydb_value_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Column) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Column) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Column) SetName(v string) {
	x.Name = &v
}

func (x *Column) SetType(v *Type) {
	x.Type = v
}

func (x *Column) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *Column) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *Column) ClearName() {
	x.Name = nil
}

func (x *Column) ClearType() {
	x.Type = nil
}

type Column_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Name of column
	Name *string
	// Type of column
	Type *Type
}

func (b0 Column_builder) Build() *Column {
	m0 := &Column{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Type = b.Type
	return m0
}

// Represents table-like structure with ordered set of rows and columns
type ResultSet struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Metadata of columns
	Columns []*Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// Rows of table
	Rows []*Value `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	// Flag indicates the result was truncated
	Truncated     *bool `protobuf:"varint,3,opt,name=truncated" json:"truncated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultSet) Reset() {
	*x = ResultSet{}
	mi := &file_protos_ydb_value_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultSet) ProtoMessage() {}

func (x *ResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_value_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ResultSet) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ResultSet) GetRows() []*Value {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ResultSet) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

func (x *ResultSet) SetColumns(v []*Column) {
	x.Columns = v
}

func (x *ResultSet) SetRows(v []*Value) {
	x.Rows = v
}

func (x *ResultSet) SetTruncated(v bool) {
	x.Truncated = &v
}

func (x *ResultSet) HasTruncated() bool {
	if x == nil {
		return false
	}
	return x.Truncated != nil
}

func (x *ResultSet) ClearTruncated() {
	x.Truncated = nil
}

type ResultSet_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Metadata of columns
	Columns []*Column
	// Rows of table
	Rows []*Value
	// Flag indicates the result was truncated
	Truncated *bool
}

func (b0 ResultSet_builder) Build() *ResultSet {
	m0 := &ResultSet{}
	b, x := &b0, m0
	_, _ = b, x
	x.Columns = b.Columns
	x.Rows = b.Rows
	x.Truncated = b.Truncated
	return m0
}

var File_protos_ydb_value_proto protoreflect.FileDescriptor

const file_protos_ydb_value_proto_rawDesc = "" +
	"\n" +
	"\x16protos/ydb_value.proto\x12\x03Ydb\x1a\x1cgoogle/protobuf/struct.proto\x1a!google/protobuf/go_features.proto\"A\n" +
	"\vDecimalType\x12\x1c\n" +
	"\tprecision\x18\x01 \x01(\rR\tprecision\x12\x14\n" +
	"\x05scale\x18\x02 \x01(\rR\x05scale\"-\n" +
	"\fOptionalType\x12\x1d\n" +
	"\x04item\x18\x01 \x01(\v2\t.Ydb.TypeR\x04item\")\n" +
	"\bListType\x12\x1d\n" +
	"\x04item\x18\x01 \x01(\v2\t.Ydb.TypeR\x04item\"~\n" +
	"\vVariantType\x121\n" +
	"\vtuple_items\x18\x01 \x01(\v2\x0e.Ydb.TupleTypeH\x00R\n" +
	"tupleItems\x124\n" +
	"\fstruct_items\x18\x02 \x01(\v2\x0f.Ydb.StructTypeH\x00R\vstructItemsB\x06\n" +
	"\x04type\"2\n" +
	"\tTupleType\x12%\n" +
	"\belements\x18\x01 \x03(\v2\t.Ydb.TypeR\belements\"A\n" +
	"\fStructMember\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\x04type\x18\x02 \x01(\v2\t.Ydb.TypeR\x04type\"9\n" +
	"\n" +
	"StructType\x12+\n" +
	"\amembers\x18\x01 \x03(\v2\x11.Ydb.StructMemberR\amembers\"L\n" +
	"\bDictType\x12\x1b\n" +
	"\x03key\x18\x01 \x01(\v2\t.Ydb.TypeR\x03key\x12#\n" +
	"\apayload\x18\x02 \x01(\v2\t.Ydb.TypeR\apayload\"=\n" +
	"\n" +
	"TaggedType\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x1d\n" +
	"\x04type\x18\x02 \x01(\v2\t.Ydb.TypeR\x04type\"\x8c\x01\n" +
	"\x06PgType\x12\x1b\n" +
	"\ttype_name\x18\n" +
	" \x01(\tR\btypeName\x12#\n" +
	"\rtype_modifier\x18\v \x01(\tR\ftypeModifier\x12\x10\n" +
	"\x03oid\x18\x01 \x01(\rR\x03oid\x12\x16\n" +
	"\x06typlen\x18\x02 \x01(\x05R\x06typlen\x12\x16\n" +
	"\x06typmod\x18\x03 \x01(\x05R\x06typmod\"\xc0\t\n" +
	"\x04Type\x124\n" +
	"\atype_id\x18\x01 \x01(\x0e2\x19.Ydb.Type.PrimitiveTypeIdH\x00R\x06typeId\x125\n" +
	"\fdecimal_type\x18\x02 \x01(\v2\x10.Ydb.DecimalTypeH\x00R\vdecimalType\x128\n" +
	"\roptional_type\x18e \x01(\v2\x11.Ydb.OptionalTypeH\x00R\foptionalType\x12,\n" +
	"\tlist_type\x18f \x01(\v2\r.Ydb.ListTypeH\x00R\blistType\x12/\n" +
	"\n" +
	"tuple_type\x18g \x01(\v2\x0e.Ydb.TupleTypeH\x00R\ttupleType\x122\n" +
	"\vstruct_type\x18h \x01(\v2\x0f.Ydb.StructTypeH\x00R\n" +
	"structType\x12,\n" +
	"\tdict_type\x18i \x01(\v2\r.Ydb.DictTypeH\x00R\bdictType\x125\n" +
	"\fvariant_type\x18j \x01(\v2\x10.Ydb.VariantTypeH\x00R\vvariantType\x122\n" +
	"\vtagged_type\x18k \x01(\v2\x0f.Ydb.TaggedTypeH\x00R\n" +
	"taggedType\x12:\n" +
	"\tvoid_type\x18\xc9\x01 \x01(\x0e2\x1a.google.protobuf.NullValueH\x00R\bvoidType\x12:\n" +
	"\tnull_type\x18\xca\x01 \x01(\x0e2\x1a.google.protobuf.NullValueH\x00R\bnullType\x12E\n" +
	"\x0fempty_list_type\x18\xcb\x01 \x01(\x0e2\x1a.google.protobuf.NullValueH\x00R\remptyListType\x12E\n" +
	"\x0fempty_dict_type\x18\xcc\x01 \x01(\x0e2\x1a.google.protobuf.NullValueH\x00R\remptyDictType\x12'\n" +
	"\apg_type\x18\xcd\x01 \x01(\v2\v.Ydb.PgTypeH\x00R\x06pgType\"\xad\x03\n" +
	"\x0fPrimitiveTypeId\x12!\n" +
	"\x1dPRIMITIVE_TYPE_ID_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04BOOL\x10\x06\x12\b\n" +
	"\x04INT8\x10\a\x12\t\n" +
	"\x05UINT8\x10\x05\x12\t\n" +
	"\x05INT16\x10\b\x12\n" +
	"\n" +
	"\x06UINT16\x10\t\x12\t\n" +
	"\x05INT32\x10\x01\x12\n" +
	"\n" +
	"\x06UINT32\x10\x02\x12\t\n" +
	"\x05INT64\x10\x03\x12\n" +
	"\n" +
	"\x06UINT64\x10\x04\x12\t\n" +
	"\x05FLOAT\x10!\x12\n" +
	"\n" +
	"\x06DOUBLE\x10 \x12\b\n" +
	"\x04DATE\x100\x12\f\n" +
	"\bDATETIME\x101\x12\r\n" +
	"\tTIMESTAMP\x102\x12\f\n" +
	"\bINTERVAL\x103\x12\v\n" +
	"\aTZ_DATE\x104\x12\x0f\n" +
	"\vTZ_DATETIME\x105\x12\x10\n" +
	"\fTZ_TIMESTAMP\x106\x12\n" +
	"\n" +
	"\x06DATE32\x10@\x12\x0e\n" +
	"\n" +
	"DATETIME64\x10A\x12\x0f\n" +
	"\vTIMESTAMP64\x10B\x12\x0e\n" +
	"\n" +
	"INTERVAL64\x10C\x12\v\n" +
	"\x06STRING\x10\x81 \x12\t\n" +
	"\x04UTF8\x10\x80$\x12\t\n" +
	"\x04YSON\x10\x81$\x12\t\n" +
	"\x04JSON\x10\x82$\x12\t\n" +
	"\x04UUID\x10\x83$\x12\x12\n" +
	"\rJSON_DOCUMENT\x10\x84$\x12\r\n" +
	"\bDYNUMBER\x10\x82&B\x06\n" +
	"\x04type\"O\n" +
	"\tValuePair\x12\x1c\n" +
	"\x03key\x18\x01 \x01(\v2\n" +
	".Ydb.ValueR\x03key\x12$\n" +
	"\apayload\x18\x02 \x01(\v2\n" +
	".Ydb.ValueR\apayload\"\xe7\x04\n" +
	"\x05Value\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x01 \x01(\bH\x00R\tboolValue\x12!\n" +
	"\vint32_value\x18\x02 \x01(\x0fH\x00R\n" +
	"int32Value\x12#\n" +
	"\fuint32_value\x18\x03 \x01(\aH\x00R\vuint32Value\x12!\n" +
	"\vint64_value\x18\x04 \x01(\x10H\x00R\n" +
	"int64Value\x12#\n" +
	"\fuint64_value\x18\x05 \x01(\x06H\x00R\vuint64Value\x12!\n" +
	"\vfloat_value\x18\x06 \x01(\x02H\x00R\n" +
	"floatValue\x12#\n" +
	"\fdouble_value\x18\a \x01(\x01H\x00R\vdoubleValue\x12!\n" +
	"\vbytes_value\x18\b \x01(\fH\x00R\n" +
	"bytesValue\x12\x1f\n" +
	"\n" +
	"text_value\x18\t \x01(\tH\x00R\ttextValue\x12D\n" +
	"\x0fnull_flag_value\x18\n" +
	" \x01(\x0e2\x1a.google.protobuf.NullValueH\x00R\rnullFlagValue\x12/\n" +
	"\fnested_value\x18\v \x01(\v2\n" +
	".Ydb.ValueH\x00R\vnestedValue\x12\x19\n" +
	"\alow_128\x18\x0f \x01(\x06H\x00R\x06low128\x12 \n" +
	"\x05items\x18\f \x03(\v2\n" +
	".Ydb.ValueR\x05items\x12$\n" +
	"\x05pairs\x18\r \x03(\v2\x0e.Ydb.ValuePairR\x05pairs\x12#\n" +
	"\rvariant_index\x18\x0e \x01(\rR\fvariantIndex\x12\x19\n" +
	"\bhigh_128\x18\x10 \x01(\x06R\ahigh128B\a\n" +
	"\x05value\"M\n" +
	"\n" +
	"TypedValue\x12\x1d\n" +
	"\x04type\x18\x01 \x01(\v2\t.Ydb.TypeR\x04type\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".Ydb.ValueR\x05value\";\n" +
	"\x06Column\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\x04type\x18\x02 \x01(\v2\t.Ydb.TypeR\x04type\"p\n" +
	"\tResultSet\x12%\n" +
	"\acolumns\x18\x01 \x03(\v2\v.Ydb.ColumnR\acolumns\x12\x1e\n" +
	"\x04rows\x18\x02 \x03(\v2\n" +
	".Ydb.ValueR\x04rows\x12\x1c\n" +
	"\ttruncated\x18\x03 \x01(\bR\ttruncatedB\\\n" +
	"\x0etech.ydb.protoB\vValueProtosZ2github.com/ydb-platform/ydb-go-genproto/protos/Ydb\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_protos_ydb_value_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_ydb_value_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protos_ydb_value_proto_goTypes = []any{
	(Type_PrimitiveTypeId)(0), // 0: Ydb.Type.PrimitiveTypeId
	(*DecimalType)(nil),       // 1: Ydb.DecimalType
	(*OptionalType)(nil),      // 2: Ydb.OptionalType
	(*ListType)(nil),          // 3: Ydb.ListType
	(*VariantType)(nil),       // 4: Ydb.VariantType
	(*TupleType)(nil),         // 5: Ydb.TupleType
	(*StructMember)(nil),      // 6: Ydb.StructMember
	(*StructType)(nil),        // 7: Ydb.StructType
	(*DictType)(nil),          // 8: Ydb.DictType
	(*TaggedType)(nil),        // 9: Ydb.TaggedType
	(*PgType)(nil),            // 10: Ydb.PgType
	(*Type)(nil),              // 11: Ydb.Type
	(*ValuePair)(nil),         // 12: Ydb.ValuePair
	(*Value)(nil),             // 13: Ydb.Value
	(*TypedValue)(nil),        // 14: Ydb.TypedValue
	(*Column)(nil),            // 15: Ydb.Column
	(*ResultSet)(nil),         // 16: Ydb.ResultSet
	(structpb.NullValue)(0),   // 17: google.protobuf.NullValue
}
var file_protos_ydb_value_proto_depIdxs = []int32{
	11, // 0: Ydb.OptionalType.item:type_name -> Ydb.Type
	11, // 1: Ydb.ListType.item:type_name -> Ydb.Type
	5,  // 2: Ydb.VariantType.tuple_items:type_name -> Ydb.TupleType
	7,  // 3: Ydb.VariantType.struct_items:type_name -> Ydb.StructType
	11, // 4: Ydb.TupleType.elements:type_name -> Ydb.Type
	11, // 5: Ydb.StructMember.type:type_name -> Ydb.Type
	6,  // 6: Ydb.StructType.members:type_name -> Ydb.StructMember
	11, // 7: Ydb.DictType.key:type_name -> Ydb.Type
	11, // 8: Ydb.DictType.payload:type_name -> Ydb.Type
	11, // 9: Ydb.TaggedType.type:type_name -> Ydb.Type
	0,  // 10: Ydb.Type.type_id:type_name -> Ydb.Type.PrimitiveTypeId
	1,  // 11: Ydb.Type.decimal_type:type_name -> Ydb.DecimalType
	2,  // 12: Ydb.Type.optional_type:type_name -> Ydb.OptionalType
	3,  // 13: Ydb.Type.list_type:type_name -> Ydb.ListType
	5,  // 14: Ydb.Type.tuple_type:type_name -> Ydb.TupleType
	7,  // 15: Ydb.Type.struct_type:type_name -> Ydb.StructType
	8,  // 16: Ydb.Type.dict_type:type_name -> Ydb.DictType
	4,  // 17: Ydb.Type.variant_type:type_name -> Ydb.VariantType
	9,  // 18: Ydb.Type.tagged_type:type_name -> Ydb.TaggedType
	17, // 19: Ydb.Type.void_type:type_name -> google.protobuf.NullValue
	17, // 20: Ydb.Type.null_type:type_name -> google.protobuf.NullValue
	17, // 21: Ydb.Type.empty_list_type:type_name -> google.protobuf.NullValue
	17, // 22: Ydb.Type.empty_dict_type:type_name -> google.protobuf.NullValue
	10, // 23: Ydb.Type.pg_type:type_name -> Ydb.PgType
	13, // 24: Ydb.ValuePair.key:type_name -> Ydb.Value
	13, // 25: Ydb.ValuePair.payload:type_name -> Ydb.Value
	17, // 26: Ydb.Value.null_flag_value:type_name -> google.protobuf.NullValue
	13, // 27: Ydb.Value.nested_value:type_name -> Ydb.Value
	13, // 28: Ydb.Value.items:type_name -> Ydb.Value
	12, // 29: Ydb.Value.pairs:type_name -> Ydb.ValuePair
	11, // 30: Ydb.TypedValue.type:type_name -> Ydb.Type
	13, // 31: Ydb.TypedValue.value:type_name -> Ydb.Value
	11, // 32: Ydb.Column.type:type_name -> Ydb.Type
	15, // 33: Ydb.ResultSet.columns:type_name -> Ydb.Column
	13, // 34: Ydb.ResultSet.rows:type_name -> Ydb.Value
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_protos_ydb_value_proto_init() }
func file_protos_ydb_value_proto_init() {
	if File_protos_ydb_value_proto != nil {
		return
	}
	file_protos_ydb_value_proto_msgTypes[3].OneofWrappers = []any{
		(*VariantType_TupleItems)(nil),
		(*VariantType_StructItems)(nil),
	}
	file_protos_ydb_value_proto_msgTypes[10].OneofWrappers = []any{
		(*Type_TypeId)(nil),
		(*Type_DecimalType)(nil),
		(*Type_OptionalType)(nil),
		(*Type_ListType)(nil),
		(*Type_TupleType)(nil),
		(*Type_StructType)(nil),
		(*Type_DictType)(nil),
		(*Type_VariantType)(nil),
		(*Type_TaggedType)(nil),
		(*Type_VoidType)(nil),
		(*Type_NullType)(nil),
		(*Type_EmptyListType)(nil),
		(*Type_EmptyDictType)(nil),
		(*Type_PgType)(nil),
	}
	file_protos_ydb_value_proto_msgTypes[12].OneofWrappers = []any{
		(*Value_BoolValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Uint32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_Uint64Value)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_BytesValue)(nil),
		(*Value_TextValue)(nil),
		(*Value_NullFlagValue)(nil),
		(*Value_NestedValue)(nil),
		(*Value_Low_128)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_ydb_value_proto_rawDesc), len(file_protos_ydb_value_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_value_proto_goTypes,
		DependencyIndexes: file_protos_ydb_value_proto_depIdxs,
		EnumInfos:         file_protos_ydb_value_proto_enumTypes,
		MessageInfos:      file_protos_ydb_value_proto_msgTypes,
	}.Build()
	File_protos_ydb_value_proto = out.File
	file_protos_ydb_value_proto_goTypes = nil
	file_protos_ydb_value_proto_depIdxs = nil
}
